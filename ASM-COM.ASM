
;TODO:
;PNT.A~ change DW func to DD func

;
;
;
PUT.L20:
	PUSH	EBX
	PUSH	EDX
	PUSH	ECX
;	CALL	PUTCHR
	CALL	DOS02
	POP	ECX
	POP	EDX
	POP	EBX
	RET


PUT.L30:
	PUSH	EAX
	SHR	AL,4
	CALL	PUT.L35
	POP	EAX
PUT.L35:
	AND	AL,0FH
	CMP	AL,10
	JB	PUT.L36
	ADD	AL,7
PUT.L36:
	ADD	AL,'0'
	JMP	PUT.L20

;
WRITE_EXP_HEADER:
	PUSH	DS
	POP	ES

	MOV	AX,4200H
	MOV	EBX,[HDL2]
	XOR	ECX,ECX
	XOR	EDX,EDX
	CALL	INT21_seek	;INT	21H

	MOV	EDI,USRDMA
	MOV	ECX,200H
	XOR	EAX,EAX
	REP
	STOSB

	MOV	ESI,EXP_HEADER
	MOV	EDI,USRDMA
	MOV	ECX,20H
	CLD
	REP
	MOVSB

	MOV	EAX,[O.BYTE]	;[SIZE]
	ADD	EAX,200H+200H
	;ADD	EAX,200H+400H
	PUSH	EAX
	SHR	EAX,9
	MOV	[USRDMA+4],AX
	POP	EAX
	AND	AX,1FFH
	MOV	[USRDMA+2],AX

		MOV	EAX,[O.ADR1]
		ADD	EAX,400H
		MOV	[USRDMA+0EH],EAX	;ESP

	MOV	AX,4000H	;write
	MOV	EBX,[HDL2]
	MOV	EDX,USRDMA
	MOV	ECX,200H
	CALL	INT21_write	;INT	21H

	RET


;
EXP_HEADER:
	DB	4DH,50H
;+2
	DW	0128H		;size
;+4
	DB	03H,00H		;size
;+6
	DB	00H,00H
;+8
	DB	20H,00H		;header size
;+A
	DB	01H,00H		;?/1000H
;+C
	DW	0FFFFH		;?/1000H

;+E
	DD	80000H	;28000H		;ESP
;+12
	DB	00,0C0H	;DB	78H,1DH
;+14
	DB	00H,00H,00H,00H	;EIP
;+18
	DB	1EH,00H,00H,00H
;+1C
	DB	01H,00H,00H,00H

;
;STR_COM:DB	'.COM',0
STR_EXP:DB	'.EXP',0

;SIZE:	DS	4


MAIN01:
	MOV	AL,[FLG.386]
	MOV	[FLG2.386],AL
	MOV	AL,[FLG.DWORD]
	MOV	[FLG2.DWORD],AL
	MOV	AL,[FLG.SHORT]
	MOV	[FLG2.SHORT],AL
	MOV	AL,1
	MOV	[PRE_SIZE],AL
	MOV	AL,0
	MOV	[PRE_SEG],AL
	MOV	[FLG2.FAR],AL

	;test>
;	CALL	GETLIN
;	CALL	PUTLIN
;	MOV	AL,[L.DATA]
;	CMP	AL,1AH
;	JNE	MAIN01
;	RET
	;<


	MOV	[STACK],ESP
	CALL	GETLIN
	MOV	AL,[FLG.P]
	OR	AL,AL
	JE	MAIN01.10
	CALL	PUTLIN
MAIN01.10:
	MOV	AL,[L.DATA]
	CMP	AL,1AH
	JNE	M10
MAIN02:
	CALL	FCBDEC
	JB	_RET
;	RET

	JMP	MAIN01



L.EQU2:	MOV	AL,[ESI]
	INC	ESI
	CALL	UPPER
	CMP	AL,CL
	JE	_RET
	POP	EBX
	JMP	SUBCOM


LBLS36:
;------------------------

MAIN10:
	CMP	BYTE [COND],80H
	JE	MAIN50

	MOV	EBX,WORK2

	MOV	EAX,20202020H
	MOV	[EBX],EAX
	MOV	[EBX+4],AX

	CALL	S.SKIP
	JE	MAIN50

	MOV	EDX,WORK2
	MOV	CH,7

MAIN11:	MOV	AL,[ESI]
	CALL	UPPER
	CMP	AL,'A'
	JNB	MAIN12
	OR	AL,AL
	JE	MAIN15
	CMP	AL,09H
	JE	MAIN15
	CMP	AL,' '
	JE	MAIN15
	CMP	AL,';'
	JE	MAIN15
	JMP	ERR6

MAIN12:	CMP	AL,'Z'+1
	JNB	ERR6
	MOV	[EDX],AL	;CALL	LDDEA
	INC	ESI
	INC	EDX
	DEC	CH
	JNE	MAIN11
	JMP	ERR6

MAIN15:	MOV	AL,7
	SUB	AL,CH
	MOV	[LEN],AL
;
	MOV	EBX,WORK2
	MOV	AL,[EBX]
	SUB	AL,'A'
		;MOV	CH,AL
		;ADD	AL,AL
		;ADD	AL,CH

		MOV	CH,AL
		ADD	AL,AL
		ADD	AL,AL
		ADD	AL,CH

	;MOV	BH,0
	;MOV	BL,AL
	;ADD	BX,OP.TBL
	MOVZX	EBX,AL
	ADD	EBX,OP.TBL

	MOV	AL,[EBX]
	MOV	CH,AL
	OR	AL,AL
	JE	ERR6
	INC	EBX
	MOV	EBX,[EBX]

OPE03:	PUSH	ECX
	;MOV	DX,WORK2+1
	;MOV	CH,5

	MOV	EAX,[WORK2+1]
	CMP	EAX,[EBX]
	JNE	SHORT OPE10#
	MOV	AL,[WORK2+1+4]
	CMP	AL,[EBX+4]
	JNE	SHORT OPE10#
	ADD	EBX,5
	JMP	SHORT OPE050

OPE05:
	MOV	AL,[EDX]	;CALL	LDADE
	CMP	AL,[EBX]	;DB	3AH,07H	;CMP AL,[BX]
	JNE	OPE10
	INC	EBX
	INC	EDX
	DEC	CH
	JNE	OPE05
OPE050:	POP	ECX
;
OPE06:
	MOV	EDX,[EBX]	;MOVZX	EDX,WORD [EBX]

	JMP	EDX


;

OPE10#:
	ADD	EBX,9	;7	;5chars + dword pnt
	POP	ECX
	DEC	CH
	JNE	SHORT OPE03
	JMP	ERR6


OPE10:	INC	EBX
	INC	EBX
		INC	EBX
		INC	EBX
OPE11:	INC	EBX
	DEC	CH
	JNE	OPE11
	POP	ECX
	DEC	CH
	JNE	OPE03
	JMP	ERR6


;
SUBCOM2:
	MOV	AL,80	;40
	SUB	AL,CH
	MOV	[WORK1],AL

;

SUBCOM:
;	JMP	ERR6		;

	MOV	ESI,L.DATA
	MOV	AL,[ESI]
	CMP	AL,'#'
	JNE	ERR6
	INC	ESI
	MOV	EDX,SUBD1
	MOV	CL,1

SUB1:	PUSH	ESI

SUB2:	MOV	AL,[EDX]	;CALL	LDADE
	OR	AL,AL
	JE	SUB5
	MOV	CH,AL
	MOV	AL,[ESI]
	CALL	UPPER
	CMP	AL,CH
	JNE	SUB3
	INC	ESI
	INC	EDX
	JMP	SUB2

SUB3:	INC	CL
	POP	ESI

SUB4:	MOV	AL,[EDX]	;CALL	LDADE
	INC	EDX
	CMP	AL,0FFH
	JE	SUBE
	OR	AL,AL
	JNE	SUB4

	JMP	SUB1

SUB5:	POP	EAX	;dummy
	DEC	CL
	JE	SUBI
	DEC	CL
	JE	SUBIF
	DEC	CL
	JE	SUBELSE
	DEC	CL
	JE	SUBENDIF
	;DEC	CL
	;JE	SUBM
SUBE:	MOV	EDX,SUBEM1
	CALL	DOS09
	JMP	ERR6

SUBEM1:	DB	'subcom error!$'

SUBD1:	DB	'INCLUDE',0
	DB	'IF',0
	DB	'ELSE',0
	DB	'ENDIF',0
	DB	'MACRO',0
	DB	0FFH


SUBI:	MOV	EDX,SUBIM1
	CALL	DOS09

;	MOV	BX,SUBWRK
;
;	MOV	CH,11
;SUBI0:	MOV	AL,20H
;	MOV	[BX],AL
;	INC	BX
;	DEC	CH
;	JNE	SUBI0

	CALL	S.SKIP
	JE	ERR6
	CMP	AL,'<'
	JNE	ERR6
	CALL	S.SKIP
	JE	ERR6
	MOV	EDX,SUBWRK
SUBI1:	MOV	AL,[ESI]
	INC	ESI
;	CMP	AL,'.'
;
	CMP	AL,'>'
	JE	SUBI7
	CALL	DOS02
	MOV	[EDX],AL	;CALL	LDDEA
	INC	EDX
	JMP	SUBI1
;SUBI5:
;
;SUBI6:	MOV	AL,[SI]
;	INC	SI
;	CMP	AL,'>'
;	JE	SUBI7
;	CALL	DOS02
;	CALL	LDDEA
;	INC	DX
;	JMP	SUBI6
SUBI7:
	XOR	AL,AL
	MOV	[EDX],AL	;CALL	LDDEA

	MOV	AL,'/'
	CALL	DOS02
	CALL	CRLF
	MOV	AL,[LOAD.F]
	INC	AL
	MOV	[LOAD.F],AL
	CMP	AL,16
	JE	ERRC	;too many include

	PUSH	ESI

	MOV	ESI,[FCB]

		MOV	EBX,[S.LEFT]
		MOV	[ESI+50],EBX
		MOV	EBX,[S.PNT]
		MOV	[ESI+54],EBX
		MOV	BL,[FL.END]
		MOV	[ESI+58],BL

	MOV	BX,[LIN.NO]
	INC	BX
	MOV	[ESI+70],BX

	MOV	EAX,[HDL]
	MOV	[ESI+72],EAX

	PUSH	ESI
	MOV	EBX,[HDL]
	MOV	CX,0
	MOV	DX,0
	MOV	AX,4201H	;seek
	CALL	INT21_seek	;INT	21H
	POP	ESI

	SHL	EDX,10H
	MOV	DX,AX
	SUB	EDX,[S.LEFT]

	MOV	[ESI+76],EDX

	MOV	EBX,[FCB]
	ADD	EBX,80
	MOV	[FCB],EBX

	MOV	ESI,SUBWRK
	MOV	EDI,[FCB]
	CALL	STRCPY

	XOR	AL,AL
	MOV	[FL.END],AL
	MOV	EBX,0
	MOV	[S.LEFT],EBX

	MOV	EDX,[FCB]
	MOV	AX,3D00H	;open
	CALL	INT21_open	;INT	21H
	MOV	[HDL],EAX

	POP	ESI
	JB	ERR0
	MOV	BX,0
	MOV	[LIN.NO],BX

	JMP	MAIN20


SUBIF:
	CALL	S.SKIP
	JE	ERR6
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERR6
	MOV	EBX,[VAL1]
	OR	EBX,EBX
	JNE	SUBIF#1

	MOV	BYTE [COND],80H
	JMP	MAIN20

SUBIF#1:
	MOV	BYTE [COND],81H
	JMP	MAIN20

;
SUBELSE:
	TEST	BYTE [COND],80H
	JE	ERR6
	XOR	BYTE [COND],1
	JMP	MAIN20

;

SUBENDIF:
	CALL	S.SKIP
	JNE	ERR6

	TEST	BYTE [COND],80H
	JE	ERR6

	MOV	BYTE [COND],0
	JMP	MAIN20


;
;
;
SUBM:

SUBIM1:	DB	'LOADING...$'




PNT.A:	DB	'DD   '
	DD	C.ADD
	DB	'DC   '
	DD	C.ADC
	DB	'ND   '
	DD	C.AND
	DB	'AA   '
	DD	C.AAA
	DB	'AS   '
	DD	C.AAS
	DB	'AM   '
	DD	C.AAM
	DB	'AD   '
	DD	C.AAD
	DB	'LIGN '
	DD	C.ALIGN

PNT.B:

PNT.C:	DB	'ALL  '
	DD	C.CALL
	DB	'LC   '
	DD	C.CLC
	DB	'LD   '
	DD	C.CLD
	DB	'LI   '
	DD	C.CLI
	DB	'MC   '
	DD	C.CMC
	DB	'MPSB '
	DD	C.CMPSB
	DB	'MPSW '
	DD	C.CMPSW
	DB	'MPSD '
	DD	C.CMPSD
	DB	'MP   '
	DD	C.CMP
	DB	'BW   '
	DD	C.CBW
	DB	'WD   '
	DD	C.CWD
	DB	'DQ   '
	DD	C.CDQ


PNT.D:	DB	'EC   '
	DD	C.DEC
	DB	'AA   '
	DD	C.DAA
	DB	'AS   '
	DD	C.DAS
	DB	'IV   '
	DD	C.DIV
	DB	'B    '
	DD	C.DB
	DB	'W    '
	DD	C.DW
	DB	'D    '
	DD	C.DD
	DB	'S    '
	DD	C.DS
	DB	'M    '
	DD	C.DM
	DB	'EFB  '
	DD	C.DB
	DB	'EFW  '
	DD	C.DW
	DB	'EFS  '
	DD	C.DS
	DB	'EFM  '
	DD	C.DM

PNT.H:

PNT.I:	DB	'NC   '
	DD	C.INC
	DB	'MUL  '
	DD	C.IMUL
	DB	'DIV  '
	DD	C.IDIV
	DB	'N    '
	DD	C.IN
	DB	'NT   '
	DD	C.INT
	DB	'RET  '
	DD	C.IRET

PNT.J:	DB	'MP   '	;1
	DD	C.JMP
	DB	'O    '
	DD	C.JO
	DB	'NO   '
	DD	C.JNO
	DB	'B    '
	DD	C.JB
	DB	'NAE  '	;5
	DD	C.JNAE
	DB	'AE   '
	DD	C.JAE
	DB	'NB   '
	DD	C.JNB
	DB	'NB   '
	DD	C.JNB
	DB	'E    '
	DD	C.JE
	DB	'Z    '	;10
	DD	C.JZ
	DB	'NE   '
	DD	C.JNE
	DB	'NZ   '
	DD	C.JNZ
	DB	'BE   '
	DD	C.JBE
	DB	'NA   '
	DD	C.JNA
	DB	'A    '	;15
	DD	C.JA
	DB	'NBE  '
	DD	C.JNBE
	DB	'S    '
	DD	C.JS
	DB	'NS   '
	DD	C.JNS
	DB	'P    '
	DD	C.JP
	DB	'NP   '	;20
	DD	C.JNP
	DB	'PO   '
	DD	C.JPO
	DB	'L    '
	DD	C.JL
	DB	'NGE  '
	DD	C.JNGE
	DB	'GE   '
	DD	C.JGE
	DB	'NL   '	;25
	DD	C.JNL
	DB	'LE   '
	DD	C.JLE
	DB	'NG   '
	DD	C.JNG
	DB	'G    '
	DD	C.JG
	DB	'NLE  '
	DD	C.JNLE
	DB	'CXZ  '	;30
	DD	C.JCXZ

PNT.L:	DB	'EA   '
	DD	C.LEA
	DB	'ODSB '
	DD	C.LODSB
	DB	'ODSW '
	DD	C.LODSW
	DB	'ODSD '
	DD	C.LODSD
	DB	'AHF  '
	DD	C.LAHF
	DB	'OOP  '
	DD	C.LOOP
	DB	'OOPE '
	DD	C.LOOPE
	DB	'OOPNE'
	DD	C.LOOPNE
	DB	'GDT  '
	DD	C.LGDT
	DB	'IDT  '
	DD	C.LIDT
	DB	'LDT  '
	DD	C.LLDT


PNT.M:	DB	'OV   '
	DD	C.MOV
	DB	'OVSB '
	DD	C.MOVSB
	DB	'OVSW '
	DD	C.MOVSW
	DB	'OVSD '
	DD	C.MOVSD
	DB	'UL   '
	DD	C.MUL
	DB	'OVZX '
	DD	C.MOVZX
	DB	'OVSX '
	DD	C.MOVSX

PNT.N:	DB	'OT   '
	DD	C.NOT
	DB	'EG   '
	DD	C.NEG
	DB	'OP   '
	DD	C.NOP
	DB	'ATIVE'
	DD	C.NATIVE

PNT.O:	DB	'R    '
	DD	C.OR
	DB	'RG   '
	DD	C.ORG
	DB	'UT   '
	DD	C.OUT

PNT.R:	DB	'CL   '
	DD	C.RCL
	DB	'CR   '
	DD	C.RCR
	DB	'OL   '
	DD	C.ROL
	DB	'OR   '
	DD	C.ROR

	DB	'ET   '
	DD	C.RET
	DB	'EP   '
	DD	C.REP
	DB	'EPE  '
	DD	C.REP
	DB	'EPZ  '
	DD	C.REP
	DB	'EPNE '
	DD	C.REPNE
	DB	'EPNZ '
	DD	C.REPNE
	DB	'EAL  '
	DD	C.REAL


PNT.S:	DB	'AL   '
	DD	C.SAL
	DB	'HL   '
	DD	C.SHL
	DB	'AR   '
	DD	C.SAR
	DB	'HR   '
	DD	C.SHR

	DB	'BB   '
	DD	C.SBB
	DB	'UB   '
	DD	C.SUB
	DB	'TC   '
	DD	C.STC
	DB	'TD   '
	DD	C.STD
	DB	'TI   '
	DD	C.STI
	DB	'CASB '
	DD	C.SCASB
	DB	'CASW '
	DD	C.SCASW
	DB	'CASD '
	DD	C.SCASD
	DB	'TOSB '
	DD	C.STOSB
	DB	'TOSW '
	DD	C.STOSW
	DB	'TOSD '
	DD	C.STOSD
	DB	'AHF  '
	DD	C.SAHF

	DB	'ETO  '
	DD	C.SETO
	DB	'ETNO '
	DD	C.SETNO
	DB	'ETB  '
	DD	C.SETB
	DB	'ETNB '
	DD	C.SETNB
	DB	'ETE  '
	DD	C.SETE
	DB	'ETNE '
	DD	C.SETNE
	DB	'ETBE '
	DD	C.SETBE
	DB	'ETA  '
	DD	C.SETA
	DB	'ETS  '
	DD	C.SETS
	DB	'ETNS '
	DD	C.SETNS
	DB	'ETP  '
	DD	C.SETP
	DB	'ETNP '
	DD	C.SETNP
	DB	'ETL  '
	DD	C.SETL
	DB	'ETGE '
	DD	C.SETGE
	DB	'ETLE '
	DD	C.SETLE
	DB	'ETG  '
	DD	C.SETG
	DB	'GDT  '
	DD	C.SGDT
	DB	'IDT  '
	DD	C.SIDT
	DB	'LDT  '
	DD	C.SLDT


PNT.T:	DB	'EST  '
	DD	C.TEST

PNT.X:
	DB	'OR   '
	DD	C.XOR
	DB	'CHG  '
	DD	C.XCHG
	DB	'LAT  '
	DD	C.XLAT


;
;
;
S.SKIP:	INC	ESI
S.SKP2:	MOV	AL,[ESI]
	CMP	AL,' '
	JE	S.SKIP
	CMP	AL,09H
	JE	S.SKIP
	OR	AL,AL
	JE	_RET
	CMP	AL,';'
	RET
;
;
;
L.SKIP:	INC	ESI
	MOV	AL,[ESI]
	OR	AL,AL
	JE	_RET
	CMP	AL,09H
	JE	_RET
	CMP	AL,' '
	JE	_RET
	CMP	AL,';'
	JE	_RET

	CMP	AL,'['	;#
	JE	_RET

	CMP	AL,']'
	JE	_RET
	CMP	AL,','
	JE	_RET
	JMP	L.SKIP

;
HASH:
	PUSH	EBX
	PUSH	ECX

	XOR	ECX,ECX
	MOV	CL,[EBX]
	MOV	AH,CL
HASH.10:
	INC	EBX
	ROL	AH,1
	XOR	AH,[EBX]
	LOOP	HASH.10

	MOV	AL,AH
	POP	ECX
	POP	EBX
	RET

;*************************************

;
C.REAL:
	MOV	AL,0
	MOV	[FLG.386],AL
	MOV	[FLG.DWORD],AL
	JMP	MAIN20

C.NATIVE:
	MOV	AL,0FFH
	MOV	[FLG.386],AL
	MOV	[FLG.DWORD],AL
	JMP	MAIN20



;

C.ALIGN:
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB

	;JMP	C.ALIGN.20	;#

	MOV	BX,[VAL1]
	DEC	BX
	MOV	CX,[O.ADR1]
C.ALIGN.10:
	MOV	AX,CX
	AND	AX,BX
	JE	C.ALIGN.20
	MOV	AL,90H	;00H
	CALL	SETDAT
	INC	CX
	JMP	C.ALIGN.10
C.ALIGN.20:
	JMP	MAIN20


;
;
;
C.ORG:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	MOV	EBX,[VAL1]
	MOV	[ORG.ADR],EBX
	MOV	[O.ADR1],EBX
	JMP	MAIN20

;
;
;
C.END:	DEC	ESI
	CALL	S.SKIP
	JNE	ERRB
	JMP	MAIN02



C.DB:
	DEC	ESI
	CALL	S.SKIP
C.DB0:
	MOV	AL,[ESI]
	CMP	AL,27H
	JE	C.DB3
	CMP	AL,'"'
	JE	C.DB3
C.DB1:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	MOV	BX,[VAL1]
	MOV	AL,BL
	CALL	SETDAT
	DEC	ESI
	CALL	S.SKIP
	MOV	AL,[ESI]
	CMP	AL,','
	JNE	MAIN20
	INC	ESI
	JMP	C.DB0
C.DB3:	MOV	CL,AL

	INC	ESI
	INC	ESI
	MOV	AL,[ESI]
	DEC	ESI
	DEC	ESI	;LD A,(IX+2)

	CMP	AL,CL
	JE	C.DB1
C.DB4:
	INC	ESI
	MOV	AL,[ESI]
	CMP	AL,CL
	JE	C.DB6
	CMP	AL,7FH
	JE	ERR6
	PUSH	ECX
	CALL	SETDAT
	POP	ECX
	JMP	C.DB4
C.DB6:
	CALL	S.SKIP
	MOV	AL,[ESI]
	CMP	AL,','
	JNE	MAIN20
	INC	ESI
	JMP	C.DB0

;
;
;
C.DW:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
C.DW1:	MOV	BX,[VAL1]
	CALL	SETD2
	DEC	ESI
	CALL	S.SKIP
	JE	MAIN20
	CALL	OPCOD2
	JMP	C.DW1

;

C.DM:
	DEC	ESI
	CALL	S.SKIP
	MOV	AL,[ESI]
	CMP	AL,27H
	JE	C.DM0
	CMP	AL,'"'
	JNE	ERRB
C.DM0:	MOV	CL,AL
C.DM1:	INC	ESI
	MOV	AL,[ESI]
	CMP	AL,CL
	JE	C.DM2
	PUSH	ECX
	CALL	SETDAT
	POP	ECX
	JMP	C.DM1
C.DM2:	INC	ESI
	JMP	MAIN20


;
;
;
C.DS:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	DEC	ESI
	CALL	S.SKIP
	MOV	AL,[ESI]
	CMP	AL,','
	MOV	CH,00H
	MOV	EBX,[VAL1]
	MOV	[VAL2],EBX
	JNE	C.DS1
	CALL	OPCOD2
	CMP	AL,50H
	JNE	ERRB

	MOV	EBX,[VAL1]
	MOV	AL,BH
	OR	AL,AL
	JNE	ERR7

	MOV	CH,BL
C.DS1:	MOV	EBX,[VAL2]

C.DS2:	OR	EBX,EBX
	JE	MAIN20
	MOV	AL,CH
	PUSH	ECX
	CALL	SETDAT
	POP	ECX
	DEC	EBX
	JMP	C.DS2


;
C.SLDT:
	MOV	AH,0
	MOV	AL,0
	JMP	C.LDT

;
C.SIDT:
	MOV	AH,1
	MOV	AL,1
	JMP	C.LDT
;
C.SGDT:
	MOV	AH,1
	MOV	AL,0
	JMP	C.LDT

;
C.LLDT:
	MOV	AH,0
	MOV	AL,02H*8
	JMP	C.LDT

;
C.LIDT:
	MOV	AH,01H
	MOV	AL,03H*8
	JMP	C.LDT

;
C.LGDT:
	MOV	AH,01H
	MOV	AL,02H*8
	JMP	C.LDT
;

C.LDT:
	PUSH	EAX
	CALL	OPCODE
	MOV	CH,AL
	CMP	CH,30H
	JB	ERRB
	CMP	CH,30H+20H
	JNB	ERRB

;	mem

	MOV	AL,0FH
	CALL	SETDAT
	MOV	AL,01H
	CALL	SETDAT
	;MOV	AL,02H*8
	POP	EAX
	CALL	MEM1
	JMP	MAIN20

;
;
;

C.CALL:	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.CALLREG
	CMP	AL,50H
	JE	C.CALLN
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.CALLMEM
	JMP	ERRB

C.CALLN:
	MOV	AL,0E8H
	CALL	SETDAT
	CALL	RELADRS
	JMP	MAIN20

C.CALLMEM:
	CMP	BYTE [FLG2.FAR],0
	JNE	C.CALLFMEM

	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00010000B
	CALL	MEM1
	JMP	MAIN20

C.CALLFMEM:
	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00011000B
	CALL	MEM1
	JMP	MAIN20


C.CALLREG:
	PUSH	EAX
	MOV	AL,0FFH
	CALL	SETDAT
	POP	EAX
	AND	AL,07H
	OR	AL,11010000B
	CALL	SETDAT
	JMP	MAIN20


;
;
;
C.TEST:	CALL	TERM2

	CMP	CL,50H
	JNE	C.TEST.10
	;CMP	CH,00H
	;JE	C.TESTACC
	;CMP	CH,08H
	;JE	C.TESTACC

C.TEST.10:
	MOV	AL,CH
	CMP	AL,10H
	JB	C.TESTRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.TESTMEM
	JMP	ERRB

C.TESTRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.TESTRGRG
	CMP	AL,50H
	JE	C.TESTRGN
	JMP	ERRB
C.TESTRGRG:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,84H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	AND	CH,7
	OR	AL,CH
	OR	AL,0C0H
	JMP	SETD1

C.TESTRGN:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0C0H
	CALL	SETDAT
	MOV	BX,[VAL2]

	MOV	AL,CH
	SHR	AL,3
	CALL	SETV2
	JMP	MAIN20

;	MOV	AL,CH
;	CMP	AL,10H
;	MOV	AL,BL
;	JB	C.TESTRGNB
;	CALL	SETDAT
;	MOV	AL,BH
;C.TESTRGNB:
;	JMP	SETD1

C.TESTMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.TESTMEMRG
	CMP	AL,50H
	JE	C.TESTMEMN
	JMP	ERRB

C.TESTMEMRG:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,84H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

C.TESTMEMN:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	PUSH	EAX
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,00H
	CALL	MEM1
	POP	EAX
	AND	AL,1

	CALL	SETV2		;##
	JMP	MAIN20

	MOV	AX,[VAL2]
	JE	C.TESTMEMN.B
	CALL	SETDAT
	MOV	AL,AH
C.TESTMEMN.B:
	JMP	SETD1
C.TESTACC:
	MOV	AL,CH
	CALL	SIZE
	PUSH	EAX
	CALL	SETPRE2
	OR	AL,0A8H
	CALL	SETDAT
	POP	EAX
	AND	AL,1

	CALL	SETV2		;##
	JMP	MAIN20

	MOV	AX,[VAL2]
	JE	C.TESTACC.B
	CALL	SETDAT
	MOV	AL,AH
C.TESTACC.B:
	JMP	SETD1


;
;
;
C.ADD:	MOV	AL,00000000B
	JMP	C.C
C.ADC:	MOV	AL,00010000B
	JMP	C.C
C.SBB:	MOV	AL,00011000B
	JMP	C.C
C.SUB:	MOV	AL,00101000B
	JMP	C.C
C.AND:	MOV	AL,00100000B
	JMP	C.C
C.OR:	MOV	AL,00001000B
	JMP	C.C
C.XOR:	MOV	AL,00110000B
	JMP	C.C
C.CMP:	MOV	AL,00111000B
	JMP	C.C
;
C.C:
	MOV	[BDAT+0],AL
		MOV	BYTE [INCL_NAME],0
	CALL	TERM2

	CMP	CL,50H
	JNE	C.C.10
	;CMP	CH,00H
	;JE	C.CACC
	;CMP	CH,08H
	;JE	C.CACC

C.C.10:
	MOV	AL,CH
	CMP	AL,10H
	JB	C.CRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.CMEM
	JMP	ERRB
C.CRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.CRGRG
	CMP	AL,30H+20H
	JB	C.CRGMEM
	CMP	AL,50H
	JE	C.CRGN
	JMP	ERRB
C.CRGRG:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	PUSH	EBX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	EBX
	CALL	SETDAT
	MOV	AL,CL
	AND	AL,07H
	SHL	AL,3
	MOV	DL,AL
	MOV	AL,CH
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1
;
C.CRGN:
		TEST	CH,8
		JE	C.CRGN.10

		CMP	BYTE [INCL_NAME],0
		JNE	C.CRGN.10
		CMP	DWORD [VAL2],7FH
		JG	C.CRGN.10
		CMP	DWORD [VAL2],-7FH
		JL	C.CRGN.10
		JMP	C.CRGNB
C.CRGN.10:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,80H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	EBX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	EBX
	OR	AL,0C0H
;
	CALL	SETDAT

	MOV	AL,CH
	SHR	AL,3
	CALL	SETV2
	JMP	MAIN20

C.CRGNB:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,80H+02H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	EBX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	EBX
	OR	AL,0C0H
;
	CALL	SETDAT

	;MOV	AL,CH
	;SHR	AL,3
	MOV	AL,0
	CALL	SETV2
	JMP	MAIN20


;
C.CRGMEM:
	CALL	SETPRE_SEG
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,02H
	MOV	BL,[BDAT]
	OR	AL,BL
	CALL	SETDAT

	MOV	AL,CH
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20
;
C.CMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.CMEMRG
	CMP	AL,50H
	JE	C.CMEMN
	JMP	ERRB

C.CMEMRG:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	MOV	BL,[BDAT]
	OR	AL,BL
	CALL	SETDAT

	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

C.CMEMN:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	PUSH	EAX
	CALL	SETPRE2
	OR	AL,80H
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	POP	EAX
	CALL	SETV2
	JMP	MAIN20

C.CACC:
	MOV	AL,CH
	CALL	SIZE
	PUSH	EAX
	CALL	SETPRE2
	MOV	BL,[BDAT]
	OR	AL,BL
	OR	AL,04H
	CALL	SETDAT
	POP	EAX
	AND	AL,1

	CALL	SETV2		;##
	JMP	MAIN20


	MOV	AX,[VAL2]
	JE	C.CACC.B
	CALL	SETDAT
	MOV	AL,AH
C.CACC.B:
	JMP	SETD1




;
;
;

C.DEC:	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,08H
	JB	C.DECRGB
	CMP	AL,10H
	JB	C.DECRGW
	CMP	AL,30H+20H
	JB	C.DECMEM
	JMP	ERRB
C.DECRGB:
	MOV	AL,0FEH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0C8H
	JMP	SETD1
C.DECRGW:
	CALL	SETPRE
	MOV	AL,CH
	AND	AL,07H
	OR	AL,48H
	JMP	SETD1
C.DECMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE2	;WORD/DWORD
	OR	AL,0FEH
	CALL	SETDAT
	MOV	AL,00001000B
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.IN:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,00H
	JE	C.INAL
	CMP	AL,08H
	JE	C.INAX
	JMP	ERRB
C.INAL:
	MOV	AL,CL
	CMP	AL,50H
	JE	C.INALN
	CMP	AL,0AH	;DX
	JE	C.INALDX
	JMP	ERRB
C.INALN:
	MOV	AL,0E4H
	CALL	SETDAT
	MOV	AL,[VAL2]
	JMP	SETD1
C.INALDX:
	MOV	AL,0ECH
	JMP	SETD1
C.INAX:
	MOV	AL,CL
	CMP	AL,0AH
	JE	C.INAXDX
	CMP	AL,50H
	JE	C.INAXN
	JMP	ERRB
C.INAXDX:
	MOV	AL,0EDH
	JMP	SETD1
C.INAXN:
	MOV	AL,0E5H
	CALL	SETDAT
	MOV	AL,[VAL2]
	JMP	SETD1

;
;
;

C.INC:	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,08H
	JB	C.INCRGB
	CMP	AL,10H
	JB	C.INCRGW
	CMP	AL,30H+20H
	JB	C.INCMEM
	JMP	ERRB

C.INCRGB:
	MOV	AL,0FEH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0C0H
	JMP	SETD1

C.INCRGW:
	CALL	SETPRE
	AND	AL,07H
	OR	AL,40H
	JMP	SETD1

C.INCMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE	;
	OR	AL,0FEH
	CALL	SETDAT
	MOV	AL,00H
	CALL	MEM1
	JMP	MAIN20


;
;
;

C.INT:
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	MOV	AL,0CDH
	CALL	SETDAT
	MOV	AL,[VAL1]
	JMP	SETD1

;
;
;

C.JMP:	CALL	OPCODE
	CMP	AL,50H
	JE	C.JMPN
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.JMPREG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.JMPMEM
	JMP	ERRB

C.JMPN:	MOV	AL,[FLG2.SHORT]
	OR	AL,AL
	JNE	C.JMPN_SHORT

		PUSHAD
		CALL	CALREL
		CALL	IS_SREL
		POPAD
		JE	C.JMPN_SHORT

	MOV	AL,0E9H
	CALL	SETDAT
	CALL	RELADRS
	JMP	MAIN20
C.JMPN_SHORT:
	MOV	AL,0EBH
	PUSH	EAX
	JMP	C.J1


C.JMPMEM:
	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00100000B
	CALL	MEM1
	JMP	MAIN20

C.JMPREG:
	PUSH	EAX
	MOV	AL,0FFH
	CALL	SETDAT
	POP	EAX
	AND	AL,07H
	OR	AL,11100000B
	CALL	SETDAT
	JMP	MAIN20


C.JO:	MOV	AL,70H
	JMP	C.J2
C.JNO:	MOV	AL,71H
	JMP	C.J2
C.JNAE:
C.JB:	MOV	AL,72H
	JMP	C.J2
C.JAE:
C.JNB:	MOV	AL,73H
	JMP	C.J2
C.JZ:
C.JE:	MOV	AL,74H
	JMP	C.J2
C.JNZ:
C.JNE:	MOV	AL,75H
	JMP	C.J2
C.JNA:
C.JBE:	MOV	AL,76H
	JMP	C.J2
C.JNBE:
C.JA:	MOV	AL,77H
	JMP	C.J2
C.JS:	MOV	AL,78H
	JMP	C.J2
C.JNS:	MOV	AL,79H
	JMP	C.J2
C.JP:	MOV	AL,7AH
	JMP	C.J2
C.JPO:
C.JNP:	MOV	AL,7BH
	JMP	C.J2
C.JNGE:
C.JL:	MOV	AL,7CH
	JMP	C.J2
C.JNL:
C.JGE:	MOV	AL,7DH
	JMP	C.J2
C.JNG:
C.JLE:	MOV	AL,7EH
	JMP	C.J2
C.JNLE:
C.JG:	MOV	AL,7FH
	JMP	C.J2

C.LOOP:	MOV	AL,0E2H
	JMP	C.J

C.LOOPE:MOV	AL,0E1H
	JMP	C.J

C.LOOPNE:MOV	AL,0E0H
	JMP	C.J

C.JCXZ:	MOV	AL,0E3H
	JMP	C.J

;
C.J:	PUSH	EAX
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
C.J1:
	CALL	REL
	POP	EAX

	CALL	SETDAT
;
	MOV	AL,BL
	JMP	SETD1

C.J2:	PUSH	EAX
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB

	MOV	AL,[FLG.R]
	OR	AL,AL
	JNE	C.J1

	MOV	AL,[FLG2.SHORT]
	OR	AL,AL
	JNE	C.J1

		PUSHAD
		CALL	CALREL
		CALL	IS_SREL
		POPAD
		JE	C.J1

	MOV	AL,0FH
	CALL	SETDAT
	POP	EAX
	SUB	AL,70H
	ADD	AL,80H
	CALL	SETDAT

	CALL	RELADRS
	JMP	MAIN20

;
;
;

C.LEA:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JNB	ERRB

	MOV	AL,CL
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JNB	ERRB

	MOV	AL,8DH
	CALL	SETDAT
	MOV	AL,CH
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20

;
;
;


C.MOV:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,10H
	JB	C.MOVRG
	CMP	AL,14H+2
	JB	C.MOVSG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.MOVMEM
	JMP	ERRB
C.MOVRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.MOVRGRG
	CMP	AL,14H+2
	JB	C.MOVRGSG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.MOVRGMEM
	CMP	AL,50H
	JE	C.MOVRGN
	JMP	ERRB

C.MOVRGRG:
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,88H
	CALL	SETDAT
	MOV	AL,CL
	SHL	AL,3
	AND	AL,38H
	MOV	DL,AL
	MOV	AL,CH
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.MOVRGSG:
	MOV	AL,CH
	CMP	AL,08H
	JB	ERRB
	MOV	AL,8CH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	MOV	DL,AL
	MOV	AL,CL
	SUB	AL,10H
	SHL	AL,3
	AND	AL,38H	;18H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.MOVRGMEM:
	MOV	AL,CH
	AND	AL,07H
	CMP	AL,00H
	JNE	C.MOVRGMEM.05
	MOV	AL,CL
	CALL	ISMEM
;	CMP	AL,30H+00110B
;#IF A386
;	JE	C.MOVACCMEM
;#ENDIF

C.MOVRGMEM.05:
	CALL	SETPRE_SEG
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,8AH
	CALL	SETDAT
	MOV	AL,CH
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20

;	acc,[nn]

C.MOVACCMEM:
	CALL	SETPRE_SEG
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0A0H
	CALL	SETDAT
	CALL	SETA2
	JMP	MAIN20

C.MOVRGN:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2

	MOV	AL,CH
	AND	AL,0FH
	OR	AL,0B0H
	CALL	SETDAT

	MOV	AL,CH
	SHR	AL,3

;	CMP	AL,08H
;	MOV	BX,[VAL2]
;	MOV	AL,BL
;	JB	C.MOVRGN.1
;	CALL	SETDAT
;	MOV	AL,BH
;C.MOVRGN.1:
;	JMP	SETD1

	CALL	SETV2
	JMP	MAIN20


C.MOVSG:
	MOV	AL,CL
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.MOVSGRG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.MOVSGMEM
	JMP	ERRB

C.MOVSGRG:
	MOV	AL,CL
	CMP	AL,08H
	JB	ERRB
	MOV	AL,8EH
	CALL	SETDAT
	MOV	AL,CH
	SUB	AL,10H
	SHL	AL,3
	AND	AL,38H	;18H
	MOV	DL,AL
	MOV	AL,CL
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.MOVSGMEM:
	CALL	SETPRE_SEG
	MOV	AL,8EH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H	;03H
	SHL	AL,3
	CALL	MEM2
	JMP	MAIN20

;
C.MOVMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.MOVMEMRG
	CMP	AL,14H+2
	JB	C.MOVMEMSG
	CMP	AL,50H
	JE	C.MOVMEMN
	JMP	ERRB

C.MOVMEMRG:
	MOV	AL,CH
;	CMP	AL,30H+00110B
	CALL	ISMEM
	JNE	C.MOVMEMRG.05
	MOV	AL,CL
	AND	AL,07H
	CMP	AL,00H
;#IF A386
;	JE	C.MOVMEMACC
;#ENDIF

C.MOVMEMRG.05:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,88H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

C.MOVMEMACC:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0A2H
	CALL	SETDAT
	CALL	SETA1
	JMP	MAIN20

C.MOVMEMSG:
	CALL	SETPRE_SEG
	MOV	AL,8CH
	CALL	SETDAT
	AND	CL,07H	;03H
	SHL	CL,3
	MOV	AL,CL
	CALL	MEM1
	JMP	MAIN20



C.MOVMEMN:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	PUSH	EAX
	CALL	SETPRE2
	OR	AL,0C6H
	CALL	SETDAT
	MOV	AL,00H
	CALL	MEM1
	POP	EAX
	CALL	SETV2
	JMP	MAIN20


;
;
;
C.MOVZX:
	MOV	AL,0B6H
	JMP	C.MOVZX2

C.MOVSX:
	MOV	AL,0BEH
	JMP	C.MOVZX2

C.MOVZX2:
	MOV	[C.MOVZX.CODE],AL
	CALL	TERM2_2
	MOV	AL,CH
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.MOVZX.REG
	JMP	ERRB

C.MOVZX.REG:
	CMP	CL,10H
	JB	C.MOVZX.REGREG
	CMP	CL,30H
	JB	ERRB
	CMP	CL,30H+20H
	JB	C.MOVZX.REGMEM
	JMP	ERRB

C.MOVZX.REGREG:
	CALL	SETPRE
	MOV	AL,0FH
	CALL	SETDAT
	MOV	AL,CL
	CALL	SIZE
	OR	AL,[C.MOVZX.CODE]	;0B6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	CALL	CVREG2
	AND	CL,07H
	OR	AL,CL
	OR	AL,11000000B
	JMP	SETD1

C.MOVZX.REGMEM:
	CALL	SETPRE
	MOV	AL,0FH
	CALL	SETDAT
;	MOV	AL,CL
;	CALL	SIZE
	call	byteword

	OR	AL,[C.MOVZX.CODE]	;0B6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20

;
;
;
TERM2_2:
	CALL	OPCODE
	MOV	CH,AL
	MOV	AL,[PRE_SIZE]
	MOV	[PRE_SIZE1],AL
	PUSH	ECX
	MOV	AL,[FLG2.DWORD]
	PUSH	EAX

	MOV	EBX,[VAL1]
	PUSH	EBX

	CALL	OPCOD2
	MOV	BL,[PRE_SIZE]
	;MOV	[PRE_SIZE2],AL	;##
		MOV	[PRE_SIZE2],BL
	MOV	EBX,[VAL1]
	MOV	[VAL2],EBX

	POP	EBX
	MOV	[VAL1],EBX

	POP	ECX
	MOV	[FLG2.DWORD],CL

	POP	ECX
	MOV	CL,AL
	RET


C.IMUL:
C.IMUL2:
	CALL	OPCODE
	CMP	BYTE [ESI],','
	JNE	C.IMUL0
	CALL	TERM2.SUB

	CMP	CH,8
	JB	ERRB
	CMP	CH,10H
	JB	C.IMUL2.RG
	JMP	ERRB
C.IMUL2.RG:
	CMP	CL,8
	JB	ERRB
	CMP	CL,10H
	JB	C.IMUL2.RGRG
	JMP	ERRB

C.IMUL2.RGRG:
	CALL	SIZE
	CALL	SETPRE2
	MOV	AL,0FH
	CALL	SETDAT
	MOV	AL,0AFH
	CALL	SETDAT
	MOV	AL,CH
	SHL	AL,3
	AND	AL,38H
	MOV	DL,AL
	MOV	AL,CL
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1


;C.IMUL:
C.IMUL0:
	PUSH	EAX
	MOV	AL,00101000B
	MOV	[BDAT],AL
	POP	EAX
	JMP	C.M.IMUL	;JMP	C.M

C.MUL:	MOV	AL,00100000B
	JMP	C.M
C.IDIV:	MOV	AL,00111000B
	JMP	C.M
C.DIV:	MOV	AL,00110000B
	JMP	C.M

;
C.M:	MOV	[BDAT],AL
	CALL	OPCODE
C.M.IMUL:
	MOV	CH,AL
	CMP	AL,10H
	JB	C.IMULRG
	CMP	AL,30H+20H
	JB	C.IMULMEM
	JMP	ERRB

C.IMULRG:
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	EBX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	EBX
	OR	AL,0C0H
	JMP	SETD1

C.IMULMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.MOVSB:MOV	AL,0A4H
	JMP	SETD1

C.MOVSW:CALL	PREW
C.MOVSW.10:
	MOV	AL,0A5H
	JMP	SETD1

C.MOVSD:CALL	PRED
	JMP	C.MOVSW.10
;
C.CMPSB:MOV	AL,0A6H
	JMP	SETD1

C.CMPSW:CALL	PREW
C.CMPSW.10:
	MOV	AL,0A7H
	JMP	SETD1

C.CMPSD:CALL	PRED
	JMP	C.CMPSW.10
;
C.STOSB:MOV	AL,0AAH
	JMP	SETD1

C.STOSW:CALL	PREW
C.STOSW.10:
	MOV	AL,0ABH
	JMP	SETD1

C.STOSD:CALL	PRED
	JMP	C.STOSW.10
;
C.LODSB:MOV	AL,0ACH
	JMP	SETD1

C.LODSW:CALL	PREW
C.LODSW.10:
	MOV	AL,0ADH
	JMP	SETD1

C.LODSD:CALL	PRED
	JMP	C.LODSW.10
;
C.SCASB:MOV	AL,0AEH
	JMP	SETD1

C.SCASW:CALL	PREW
C.SCASW.10:
	MOV	AL,0AFH
	JMP	SETD1

C.SCASD:
	CALL	PRED
	JMP	C.SCASW.10
;
C.NOP:
	MOV	AL,90H
	JMP	SETD1

;
;
;
C.NEG:	CALL	OPCODE
	CMP	AL,10H
	JB	C.NEGRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.NEGMEM
	JMP	ERRB

C.NEGRG:
	MOV	CH,AL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0D8H
	JMP	SETD1

C.NEGMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,000011000B
	CALL	MEM1
	JMP	MAIN20

;
;
;

C.NOT:	CALL	OPCODE
	CMP	AL,10H
	JB	C.NOTRG

	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.NOTMEM

	JMP	ERRB
C.NOTRG:
	MOV	CH,AL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0D0H
	JMP	SETD1

C.NOTMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,000010000B
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.OUT:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,50H
	JE	C.OUTN
	CMP	AL,0AH
	JE	C.OUTDX
	JMP	ERRB
C.OUTN:
	MOV	AL,CL
	CMP	AL,00H
	JE	C.OUTNAL
	CMP	AL,08H
	JE	C.OUTNAX
	JMP	ERRB
C.OUTNAL:
	MOV	AL,0E6H
	CALL	SETDAT
	MOV	AL,[VAL1]
	JMP	SETD1
C.OUTNAX:
	MOV	AL,0E7H
	CALL	SETDAT
	MOV	AL,[VAL1]
	JMP	SETD1

C.OUTDX:
	MOV	AL,CL
	CMP	AL,00H
	JE	C.OUTDXAL
	CMP	AL,08H
	JE	C.OUTDXAX
	JMP	ERRB
C.OUTDXAL:
	MOV	AL,0EEH
	JMP	SETD1
C.OUTDXAX:
	MOV	AL,0EFH
	JMP	SETD1
;
;
;
C.POP:	CALL	OPCODE
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.POPRG
	CMP	AL,14H+2
	JB	C.POPSG
	CMP	AL,30H+20H
	JB	C.POPMEM
	JMP	ERRB
C.POPRG:
	CALL	SETPRE
	AND	AL,07H
	OR	AL,58H
	JMP	SETD1
C.POPSG:
	CMP	AL,14H
	JE	C.POPFS
	CMP	AL,15H
	JE	C.POPGS
	SUB	AL,10H
	SHL	AL,3
	OR	AL,07H
	JMP	SETD1
C.POPFS:
C.POPGS:
	PUSH	EAX
	MOV	AL,0FH
	CALL	SETDAT
	POP	EAX
	SUB	AL,14H
	SHL	AL,3
	OR	AL,0A1H
	JMP	SETD1

C.POPMEM:
	CALL	SETPRE_SEG
	CALL	SETPRE
	MOV	AL,8FH
	CALL	SETDAT
	MOV	AL,00000000B
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.PUSH:	CALL	OPCODE
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.PUSHRG
	CMP	AL,14H+2
	JB	C.PUSHSG
	CMP	AL,30H+20H
	JB	C.PUSHMEM
	CMP	AL,50H
	JE	C.PUSHNN
	JMP	ERRB
C.PUSHRG:
	CALL	SETPRE
	AND	AL,07H
	OR	AL,50H
	JMP	SETD1
C.PUSHSG:
	CMP	AL,14H
	JE	C.PUSHFS
	CMP	AL,15H
	JE	C.PUSHGS
	SUB	AL,10H
	SHL	AL,3
	OR	AL,06H
	JMP	SETD1

C.PUSHFS:
C.PUSHGS:
	PUSH	EAX
	MOV	AL,0FH
	CALL	SETDAT
	POP	EAX
	SUB	AL,14H
	SHL	AL,3
	OR	AL,0A0H
	JMP	SETD1

C.PUSHMEM:
	CALL	SETPRE_SEG
	CALL	SETPRE
	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00110000B
	CALL	MEM1
	JMP	MAIN20
C.PUSHNN:
	CALL	SETPRE
	MOV	AL,68H
	CALL	SETDAT

	MOV	AL,1
	CALL	SETV1		;##
	JMP	MAIN20

	CALL	ISDWORD
	JE	C.PUSHNNNN
	MOV	BX,[VAL1]
	CALL	SETD2
	JMP	MAIN20
C.PUSHNNNN:
	;MOV	BX,[VAL1]
	;CALL	SETD2
	;MOV	BX,[VAL1+2]
	;CALL	SETD2
	MOV	EBX,[VAL1]
	CALL	SETD4
	JMP	MAIN20

;
;
;
C.REP:	MOV	AL,0F3H
	JMP	SETD1

C.REPNE:MOV	AL,0F2H
	JMP	SETD1

C.RET:
	DEC	ESI
	CALL	S.SKIP
	JNE	C.RET2
	MOV	AL,0C3H
	JMP	SETD1

C.RET2:
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB

	MOV	AL,0C2H
	CALL	SETDAT

	MOV	BX,[VAL1]
	CALL	SETD2
	JMP	MAIN20


;
;
;
C.RCL:	MOV	AL,00010000B
	JMP	C.S

C.RCR:	MOV	AL,00011000B
	JMP	C.S

C.ROL:	MOV	AL,00000000B
	JMP	C.S

C.ROR:	MOV	AL,00001000B
	JMP	C.S

C.SAL:
C.SHL:	MOV	AL,00100000B
	JMP	C.S

C.SAR:	MOV	AL,00111000B
	JMP	C.S

C.SHR:	MOV	AL,00101000B
	JMP	C.S

;
C.S:	MOV	[BDAT+0],AL
	CALL	TERM2
	MOV	AL,CH
	CMP	AL,10H
	JB	C.SRG
	CMP	AL,30H+20H
	JB	C.SMEM
	JMP	ERRB

C.SRG:
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0D0H
	MOV	DL,AL
	MOV	AL,CL
	CMP	AL,50H
	JE	C.SRG1
	OR	DL,02H	;DL|=00000010B
	MOV	AL,CL
	CMP	AL,01H
	JE	C.SRGCL
	JMP	ERRB

C.SRG1:
	MOV	BX,[VAL2]
	CMP	BX,1
	JNE	C.SRGN
C.SRGCL:
	MOV	AL,DL
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	EBX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	EBX
	OR	AL,0C0H
	JMP	SETD1
C.SRGN:
	MOV	AL,DL
	AND	AL,01H
	OR	AL,0C0H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	EBX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	EBX
	OR	AL,0C0H
	CALL	SETDAT
	MOV	AL,[VAL2]
	JMP	SETD1

C.SMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE2
	OR	AL,0D0H
	MOV	DL,AL
	CMP	CL,50H
	JE	C.SMEM1
	OR	DL,02H
	CMP	CL,01H	;CL
	JE	C.SMEMCL
C.SMEM1:
	MOV	BX,[VAL1]
	CMP	BX,1
	JNE	C.SMEMN
C.SMEMCL:
	MOV	AL,DL
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	JMP	MAIN20
C.SMEMN:
	MOV	AL,DL
	AND	AL,01H
	OR	AL,0C0H
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	MOV	AL,[VAL2]
	JMP	SETD1

;
;
;
C.SETO:	MOV	AL,00H
	JMP	C.SETCC
C.SETNO:MOV	AL,01H
	JMP	C.SETCC
C.SETB:	MOV	AL,02H
	JMP	C.SETCC
C.SETNB:MOV	AL,03H
	JMP	C.SETCC
C.SETE:	MOV	AL,04H
	JMP	C.SETCC
C.SETNE:MOV	AL,05H
	JMP	C.SETCC
C.SETBE:MOV	AL,06H
	JMP	C.SETCC
C.SETA:	MOV	AL,07H
	JMP	C.SETCC
C.SETS:	MOV	AL,08H
	JMP	C.SETCC
C.SETNS:MOV	AL,09H
	JMP	C.SETCC
C.SETP:	MOV	AL,0AH
	JMP	C.SETCC
C.SETNP:MOV	AL,0BH
	JMP	C.SETCC
C.SETL:	MOV	AL,0CH
	JMP	C.SETCC
C.SETGE:MOV	AL,0DH
	JMP	C.SETCC
C.SETLE:MOV	AL,0EH
	JMP	C.SETCC
C.SETG:	MOV	AL,0FH
	JMP	C.SETCC

C.SETCC:
	PUSH	EAX
	MOV	AL,0FH
	CALL	SETDAT
	POP	EAX
	OR	AL,90H
	CALL	SETDAT

	CALL	OPCODE
	CMP	AL,08H
	JB	C.SETCC.REG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.SETCC.MEM

	JMP	ERRB

C.SETCC.REG:
	;CALL	CVREG2
	AND	AL,7
	OR	AL,2*8
	OR	AL,0C0H
	JMP	SETD1

C.SETCC.MEM:
	MOV	AL,2
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.AAA:	MOV	AL,37H
	JMP	SETD1

C.AAS:	MOV	AL,3FH
	JMP	SETD1

C.AAM:	MOV	AL,0D4H
	JMP	SETD1

C.AAD:	MOV	AL,0D5H
	JMP	SETD1

C.DAA:	MOV	AL,27H
	JMP	SETD1

C.DAS:	MOV	AL,2FH
	JMP	SETD1

C.CBW:	MOV	AL,98H
	JMP	SETD1

C.CWD:	MOV	AL,99H
	JMP	SETD1

C.CDQ:
	MOV	AL,99H
	CALL	ISDWORD
	JE	SETD1
	PUSH	EAX
	MOV	AL,66H
	CALL	SETDAT
	POP	EAX
	JMP	SETD1


C.LAHF:	MOV	AL,9FH
	JMP	SETD1

C.SAHF:	MOV	AL,9EH
	JMP	SETD1

C.PUSHAD:
	CALL	ISDWORD
	JE	C.PUSHA.05
	JMP	C.PUSHA.10

;
C.PUSHA:
	CALL	ISDWORD
	JE	C.PUSHA.10
C.PUSHA.05:
	MOV	AL,60H
	JMP	SETD1
C.PUSHA.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.PUSHA.05

C.POPAD:
	CALL	ISDWORD
	JE	C.POPA.05
	JMP	C.POPA.10

;
C.POPA:
	CALL	ISDWORD
	JE	C.POPA.10
C.POPA.05:
	MOV	AL,61H
	JMP	SETD1
C.POPA.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.POPA.05
;
C.PUSHFD:
	CALL	ISDWORD
	JE	C.PUSHF.05
	JMP	C.PUSHF.10
;
C.PUSHF:CALL	ISDWORD
	JE	C.PUSHF.10
C.PUSHF.05:
	MOV	AL,9CH
	JMP	SETD1
C.PUSHF.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.PUSHF.05
;
C.POPFD:
	CALL	ISDWORD
	JE	C.POPF.05
	JMP	C.POPF.10

;
C.POPF:	CALL	ISDWORD
	JE	C.POPF.10
C.POPF.05:
	MOV	AL,9DH
	JMP	SETD1
C.POPF.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.POPF.05
;
C.XLAT:	MOV	AL,0D7H
	JMP	SETD1

C.CLC:	MOV	AL,0F8H
	JMP	SETD1

C.CLD:	MOV	AL,0FCH
	JMP	SETD1

C.CLI:	MOV	AL,0FAH
	JMP	SETD1

C.CMC:	MOV	AL,0F5H
	JMP	SETD1

C.STC:	MOV	AL,0F9H
	JMP	SETD1

C.STD:	MOV	AL,0FDH
	JMP	SETD1

C.STI:	MOV	AL,0FBH
	JMP	SETD1

C.IRET:	MOV	AL,0CFH
	JMP	SETD1

;
;
;

C.XCHG:	CALL	TERM2

	CMP	CL,30H
	JB	C.XCHG.10

	CALL	SWAP
C.XCHG.10:


	MOV	AL,CH
	CMP	AL,10H
	JB	C.XCHGRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.XCHGMEM
	JMP	ERRB

C.XCHGRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.XCHGRGRG
	JMP	ERRB

C.XCHGRGRG:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,86H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	MOV	DL,AL
	MOV	AL,CL
	AND	AL,07H
	SHL	AL,3
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.XCHGMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.XCHGMEMRG
	JMP	ERRB
C.XCHGMEMRG:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,86H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

;
;
;

SWAP:	XCHG	CH,CL
	MOV	EAX,[VAL1]
	PUSH	EAX
	MOV	EAX,[VAL2]
	MOV	[VAL1],EAX
	POP	EAX
	MOV	[VAL2],EAX
	RET

;
;
;

CVREG2:
	AND	AL,7
	SHL	AL,3
	RET

;
;	AL:30H+n
;

CVMOD:
	PUSH	EDX
	MOV	DH,AL
	SUB	AL,30H
	SHL	AL,3
	AND	AL,0C0H
	MOV	DL,AL

	MOV	AL,DH
	SUB	AL,30H
	AND	AL,07H
	OR	AL,DL
;	OR	DL,AL
	POP	EDX
	RET

;

BYTEWORD:
	PUSH	EBX
	MOV	AL,[PRE_SIZE]
	CMP	AL,1
	MOV	BL,0
	JE	BYTEWORD.R
	MOV	BL,1
BYTEWORD.R:
	MOV	AL,BL
	POP	EBX
	RET

;

SIZE:	CMP	AL,08H
	MOV	AL,0
	JB	_RET
	INC	AL
	RET
;
REL:	MOV	AL,[PASS]
	DEC	AL
	MOV	BL,00H
	JE	REL.10
	MOV	EBX,[VAL1]
	ADD	EBX,80H
	MOV	EDX,[O.ADR1]
	INC	EDX
	INC	EDX
	SUB	EBX,EDX
	JB	ERRA

;	OR	BH,BH
;	JNE	ERRA
	CMP	EBX,100H
	JNB	ERRA

	MOV	AL,BL
	ADD	AL,80H
	MOV	BL,AL
REL.10:
	RET
;
;
;


;
MEM1:	PUSH	ESI
	MOV	DL,AL
	MOV	AL,CH
	MOV	ESI,VAL1
	CALL	MEM
	POP	ESI
	RET

MEM2:	PUSH	ESI
	MOV	DL,AL
	MOV	AL,CL
	MOV	ESI,VAL2
	CALL	MEM
	POP	ESI
	RET
;
PREW:	PUSH	EAX
	CALL	ISDWORD
	JNE	PREW.10
	MOV	AL,66H
	CALL	SETDAT
PREW.10:
	POP	EAX
	RET
;
PRED:	PUSH	EAX
	CALL	ISDWORD
	JE	PRED.10
	MOV	AL,66H
	CALL	SETDAT
PRED.10:
	POP	EAX
	RET
;
SETPRE2:
	TEST	AL,01H
	JE	SETPRE2.10
	CALL	SETPRE
SETPRE2.10:
	RET

;
SETPRE:
	PUSH	EBX
	PUSH	EAX
	MOV	AL,[FLG.DWORD]
	MOV	BL,[FLG2.DWORD]
	CMP	AL,BL
	JE	SETPRE.10
	MOV	AL,66H
	CALL	SETDAT
SETPRE.10:
	POP	EAX
	POP	EBX
	RET

;
SETPRE_SEG:
	PUSH	EAX
	MOV	AL,[PRE_SEG]
	OR	AL,AL
	JE	SETPRE_SEG.10
	CALL	SETDAT
SETPRE_SEG.10:
	POP	EAX
	RET

;
ISMEM:	PUSH	EAX
	CALL	IS386
	JE	ISMEM_3
	CMP	AL,30H+00000110B
	JE	ISMEM.30
	JMP	ISMEM.40
ISMEM_3:
	CMP	AL,30H+00000101B
	JE	ISMEM.30
	JMP	ISMEM.40

ISMEM.30:
	XOR	AX,AX
	POP	EAX
	RET
ISMEM.40:
	XOR	AX,AX
	INC	AX
	POP	EAX
	RET

;
	ALIGN	4
IS386:
	;PUSH	EAX
	;MOV	AL,[FLG2.386]
	;INC	AL
	;POP	EAX
	CMP	BYTE [FLG2.386],0FFH
	RET

;
	ALIGN	4
ISDWORD:
	;PUSH	EAX
	;MOV	AL,[FLG2.DWORD]
	;INC	AL
	;POP	EAX
	CMP	BYTE [FLG2.DWORD],0FFH
	RET

;	is short relative

IS_SREL:
	CMP	BYTE [FLG.J],0
	JE	IS_SREL.N

	CMP	EBX,60H
	JB	IS_SREL.Y
	CMP	EBX,-60H
	JA	IS_SREL.Y

IS_SREL.N:
	PUSH	EAX
	XOR	EAX,EAX
	INC	EAX
	POP	EAX
	RET

IS_SREL.Y:
	CMP	EAX,EAX
	RET
;
SETD4:
	MOV	AL,BL
	CALL	SETDAT
	MOV	AL,BH
	CALL	SETDAT
	SHR	EBX,10H
	MOV	AL,BL
	CALL	SETDAT
	MOV	AL,BH
	CALL	SETDAT
	RET

;	set BL,BH

SETD2:
	;PUSH	EBX
	MOV	AL,BL
	CALL	SETDAT
	;POP	EBX
	MOV	AL,BH
	JMP	SETDAT

;*************************************
;
;
;
;	00 01 02 03 04 05 06 07
;	AL CL DL BL AH CH DH BH
;
;	08 09 0A 0B 0C 0D 0E 0F
;	AX CX DX BX SP BP SI DI
;
;	10 11 12 13 14 15
;	ES CS SS DS FS GS
;
;	30+00:000(mod:r/m)
;
;	50
;	nn
;

OPCOD2:
	CALL	S.SKP2
	CMP	AL,','
	JNE	ERR6
OPCOD3:	INC	ESI

OPCODE:
	MOV	EBX,WORK2

	MOV	CH,80/4		;40/4
	MOV	EAX,20202020H
CODECL:	MOV	[EBX],EAX
	ADD	EBX,4
	DEC	CH
	JNE	SHORT CODECL

	DEC	ESI
	CALL	S.SKIP
	JE	CODE99

	MOV	AL,[ESI]
	CMP	AL,'['
	JNE	CODE10A	;CODE10
	INC	ESI

	MOV	AL,[PRE_SIZE]
	PUSH	EAX
	MOV	AL,[FLG2.386]
	MOV	AH,[FLG2.DWORD]
	PUSH	EAX
	CALL	CODE10
	POP	EBX
	MOV	[FLG2.386],BL
	MOV	[FLG2.DWORD],BH
	POP	EBX
	MOV	[PRE_SIZE],BL

	MOV	CH,AL
	MOV	AL,[ESI]
	CMP	AL,']'
	JNE	CODE50
	INC	ESI

	CALL	IS386
	JE	CD10

	MOV	AL,CH
	CMP	AL,0EH
	JNE	CD01
	MOV	CH,30H+00100B;[SI]
	JMP	CODE90
CD01:	CMP	AL,0FH
	JNE	CD02
	MOV	CH,30H+00101B;[DI]
	JMP	CODE90
CD02:	CMP	AL,50H
	JNE	CD03
	MOV	CH,30H+00110B;[nn]
	JMP	CODE90
CD03:	CMP	AL,0BH
	JNE	CD04
	MOV	CH,30H+00111B;[BX]
	JMP	CODE90
CD04:	JMP	ERR6

;	386

CD10:
	MOV	AL,CH
	CMP	AL,08H
	JB	ERR6
	CMP	AL,0CH	;[SP]
	JE	ERR6
	CMP	AL,0DH	;[BP]
	JE	ERR6
	CMP	AL,10H
	JB	CD10.R
	CMP	AL,50H
	JE	CD10.M
	JMP	ERR6

;	[reg]

CD10.R:
	SUB	CH,08H
	ADD	CH,30H
	JMP	CODE90

;	[nnnn]

CD10.M:
	MOV	CH,30H+00101B
	JMP	CODE90
;

STRCMP:
	PUSH	ECX
	CLD
	;MOV	CH,0
	XOR	ECX,ECX
	MOV	CL,[EDI]
	INC	EDI
STRCMP.10:
	REP
	CMPSB
	POP	ECX
	RET


;
;	[?+ 386
;

PAR:	MOV	AL,[ESI]
	CMP	AL,'+'
	JE	PAR.10
	CMP	AL,'-'
	JE	PAR.10
	JMP	ERR6

PAR.10:
;	INC	SI

	MOV	AL,CH
	CMP	AL,0CH	;[SP]
	JE	ERR6
	CMP	AL,0DH	;[BP]
	JE	PAR.BP
	PUSH	ECX
	CALL	CODE10
	POP	ECX
	CMP	AL,50H
	JNE	ERR6

	MOV	AL,[ESI]
	CMP	AL,']'
	JNE	ERR6
	INC	ESI

	SUB	CH,08H

	;	MOV	EAX,[VAL1]
	;	CMP	EAX,7FH
	;	JBE	PAR.10.1

	ADD	CH,30H+10000B	
	JMP	CODE90

PAR.10.1:
	ADD	CH,30H+01000B
	JMP	CODE90




;	[EBP+

PAR.BP:
		MOV	BYTE [INCL_NAME],0
	PUSH	ECX
	CALL	CODE10
	POP	ECX
	CMP	AL,50H
	JNE	ERR6

	MOV	AL,[ESI]
	CMP	AL,']'
	JNE	ERR6
	INC	ESI

	CMP	BYTE [INCL_NAME],0
	JNE	PAR.BP.0

		MOV	EAX,[VAL1]
		;CMP	EAX,7FH
		;JBE	PAR.BP.10.1
		CMP	EAX,7FH
		JG	PAR.BP.0
		CMP	EAX,-7FH
		JL	PAR.BP.0
		JMP	PAR.BP.10.1

PAR.BP.0:
	MOV	CH,30H+00010101B
	JMP	CODE90

PAR.BP.10.1:
	MOV	CH,30H+00001101B
	JMP	CODE90

;
;	[?+
;

CODE50:
	CALL	IS386
	JE	PAR

	MOV	AL,[ESI]
	CMP	AL,'+'
	JE	CODE50.001
	CMP	AL,'-'
	JE	CODE50.001
	JMP	ERR6
	;JNE	ERR6
CODE50.001:
;	INC	ESI
	MOV	AL,CH
	CMP	AL,0BH	;BX+
	JE	CODE50_BX
	CMP	AL,0DH	;BP+
	JE	CODE50_BP
	CMP	AL,0EH	;SI+
	JE	CODE50_SI
	CMP	AL,0FH	;DI+
	JE	CODE50_DI
	JMP	ERR6

;CODE50_BX:
	MOV	CL,00H
	JMP	CODE50_.10
CODE50_BP:
	MOV	CL,010B
CODE50_.10:
	PUSH	ECX
	CALL	CODE10
	POP	ECX
CODE50_.05:
	CMP	AL,0EH;SI
	JE	CODE50_.20
	INC	CL
	CMP	AL,0FH;DI
	JE	CODE50_.20
	CMP	AL,50H
	JE	CODE50_.30
	JMP	ERR6
CODE50_.20:
	MOV	AL,[ESI]
	CMP	AL,']'
	JNE	ERR6
	INC	ESI
	ADD	CL,30H
	MOV	CH,CL
	JMP	CODE90
CODE50_.30:
	MOV	CL,00110B
	JMP	CODE50_DISP.10

;
CODE50_BX:
	MOV	CL,111B
	JMP	CODE50_DISP

CODE50_SI:
	MOV	CL,100B
	JMP	CODE50_DISP

CODE50_DI:
	MOV	CL,101B


CODE50_DISP:
	PUSH	ECX
	CALL	CODE10
	POP	ECX
	CMP	AL,50H
	JE	CODE50_DISP.10
	CMP	CL,111B	;BX
	JNE	ERR6
	MOV	CL,000B
	JMP	CODE50_.05
CODE50_DISP.10:
	MOV	AL,[ESI]
	CMP	AL,']'
	JNE	ERRB
	INC	ESI

	ADD	CL,30H+10000B
	MOV	CH,CL
	JMP	CODE90

;
CODE10A:
	;CALL	CODE10
	MOV	AL,[PRE_SIZE]
	PUSH	EAX
	MOV	AL,[FLG2.386]
	MOV	AH,[FLG2.DWORD]
	PUSH	EAX
	CALL	CODE10
	POP	EBX
	POP	EDX

	PUSH	EAX
	MOV	AL,[ESI]
	CMP	AL,'['
	POP	EAX
	JNE	CODE10A.E
	INC	ESI

	MOV	[FLG2.386],BL
	MOV	[FLG2.DWORD],BH
	MOV	[PRE_SIZE],DL


	MOV	CH,AL

	CMP	AL,0CH	;ESP
	JE	CODE10A.ESP

	CMP	AL,50H
	JNE	CODE10A.10
	MOV	CH,101B
	JMP	CODE10A.15

CODE10A.ESP:
	PUSH	ECX
	CALL	CODE10
	POP	ECX
	CMP	AL,50H
	JNE	ERR6

	CMP	BYTE [ESI],']'
	JNE	ERR6
	INC	ESI

	MOV	BYTE [MOD2],24H
	MOV	AL,30H+10100B
	JMP	CODE10A.E

CODE10A.10:
	CMP	AL,08H
	JB	ERR6
	CMP	AL,10H
	JNB	ERR6
	SUB	CH,08H
CODE10A.15:
	MOV	AL,[PRE_SIZE]
	PUSH	EAX
	MOV	AL,[FLG2.386]
	MOV	AH,[FLG2.DWORD]
	PUSH	EAX

	PUSH	ECX
	CALL	CODE10
	POP	ECX

	POP	EBX
	MOV	[FLG2.DWORD],BH
	MOV	[FLG2.386],BL
	POP	EBX
	MOV	[PRE_SIZE],BL

	CMP	AL,08H
	JB	ERR6
	CMP	AL,10H
	JNB	ERR6

	MOV	BL,[ESI]
	CMP	BL,'*'
	JE	CODE10A.M

CODE10A.50:
	MOV	CL,0

	MOV	BL,[ESI]
	INC	ESI
	CMP	BL,']'
	JE	CODE10A.80

	DEC	ESI
	PUSH	EAX
	PUSH	ECX
	CALL	CODE10
	CMP	AL,50H
	JNE	ERR6
	MOV	AL,[ESI]
	INC	ESI
	CMP	AL,']'
	JNE	ERR6
	POP	ECX
	POP	EAX
	MOV	CL,00010000B	;+nnnn

CODE10A.80:
	SUB	AL,08H
	SHL	AL,3
	OR	CH,AL
	MOV	AH,CH		;2nd
	MOV	[MOD2],AH

	MOV	AL,00100B	;[+0]
	OR	AL,CL
	ADD	AL,30H

CODE10A.E:
	MOV	CH,AL
	JMP	CODE90

CODE10A.M:
	PUSH	EAX
	INC	ESI
	MOV	AL,[ESI]
	INC	ESI
	MOV	AH,0
	CMP	AL,'1'
	JE	CODE10A.M.10
	MOV	AH,01000000B
	CMP	AL,'2'
	JE	CODE10A.M.10
	MOV	AH,10000000B
	CMP	AL,'4'
	JE	CODE10A.M.10
	MOV	AH,11000000B
	CMP	AL,'8'
	JE	CODE10A.M.10
	JMP	ERR6
CODE10A.M.10:
	OR	CH,AH

	POP	EAX
	JMP	CODE10A.50


	ALIGN	4
C.DAT2:
;

	DB	'AL';0
	DB	'CL'
	DB	'DL'
	DB	'BL'
	DB	'AH'
	DB	'CH'
	DB	'DH'
	DB	'BH'

	DB	'AX';8
	DB	'CX'
	DB	'DX'
	DB	'BX'
	DB	'SP'
	DB	'BP'
	DB	'SI'
	DB	'DI'

	DB	'ES'
	DB	'CS'
	DB	'SS'
	DB	'DS'
	DB	'FS'
	DB	'GS'

C.DAT3:

	DB	'EAX';8
	DB	'ECX'
	DB	'EDX'
	DB	'EBX'
	DB	'ESP'
	DB	'EBP'
	DB	'ESI'
	DB	'EDI';F

CODE_FAR:
	MOV	BYTE [FLG2.FAR],0FFH
	CALL	OPCODE
	RET

STR_FAR:DB	3,'FAR'

CODE_BYTE:
	XOR	AL,AL
	MOV	[FLG2.DWORD],AL
	MOV	AL,1
	MOV	[PRE_SIZE],AL
	CALL	OPCODE
	RET

CODE_WORD:
	XOR	AL,AL
	MOV	[FLG2.DWORD],AL
	MOV	AL,2
	MOV	[PRE_SIZE],AL
	CALL	OPCODE
	RET

CODE_DWORD:
	MOV	AL,4
	MOV	[PRE_SIZE],AL
	MOV	AL,0FFH
	MOV	[FLG2.DWORD],AL
	CALL	OPCODE
	RET

CODE_SHORT:
	;MOV	AL,0
	MOV	AL,0FFH
	MOV	[FLG2.SHORT],AL
	CALL	OPCODE
	RET


;

MAIN20:
	DEC	ESI
	CALL	S.SKIP
	JNE	ERR6

MAIN50:	MOV	BX,[LIN.NO]
	INC	BX
	MOV	[LIN.NO],BX
;
	JMP	MAIN01



;---------------------------

GETLIN:	MOV	EBX,L.DATA
	MOV	CH,0	;tab-flg
	mov	Edx,0

;loop

GETL02:
	CALL	GETCHR
	JB	SHORT GETL25

GETL10:	MOV	[EBX],AL
	inc	Edx
	cmp	Edx,linesize
	jnb	errd	;too long line

	CMP	AL,27H+1
	JB	SHORT GETL13

GETL12:	INC	EBX
	JMP	SHORT GETL02

GETL13:
	CMP	AL,0DH
	JE	GETL20
	CMP	AL,1AH
	JE	GETL30
	JMP	GETL12

;	0D

GETL20:	MOV	BYTE [EBX],00H
	CALL	GETCHR
	RET

;	EOF

GETL25:	MOV	BYTE [EBX],1AH

;	1A

GETL30:	INC	EBX
	MOV	BYTE [EBX],00H
	RET

;-------------------------------

	ALIGN	4
GETCHR:
GETCHR.0:
	DEC	DWORD [S.LEFT]
	JS	SHORT GETC10

	MOV	EAX,[S.PNT]
	MOV	AL,[EAX]
	INC	DWORD [S.PNT]
	CLC
	RET

GETC10:	MOV	AL,[FL.END]
	OR	AL,AL
	JNE	GETC20

GETC12:	PUSH	EBX
	PUSH	ECX
	PUSH	EDX
	PUSH	ESI
	PUSH	EDI


	MOV	EDX,USRDMA
	CMP	BYTE [LOAD.F],0
	JE	GETC13
	MOV	EDX,USRDMA+R.BUF+W.BUF
GETC13:
	MOV	[S.PNT],EDX

	MOV	EBX,[HDL]
	MOV	ECX,R.BUF
	MOV	AX,3F00H	;read
	CALL	INT21_read	;INT	21H
	MOV	[S.LEFT],EAX
	CMP	EAX,R.BUF
	MOV	AL,0
	JE	GETC15
	DEC	AL
GETC15:	MOV	[FL.END],AL
	POP	EDI
	POP	ESI
	POP	EDX
	POP	ECX
	POP	EBX
	JMP	GETCHR.0
GETC20:
	PUSHAD
	CALL	FCBDEC
	POPAD
	JB	_RET

	;JMP	GETC12
	JMP	GETCHR

;
;	AL:code
;
;	?AL,BX
;
	ALIGN	4

PUTCHR:	PUSH	ECX
	MOV	CL,AL
PUTC1:
	DEC	DWORD [W.LEFT]
	JS	SHORT PUTC10

	MOV	EBX,[W.PNT]
	MOV	[EBX],CL
	INC	EBX
	MOV	[W.PNT],EBX
	POP	ECX
	RET
PUTC10:
	PUSH	ECX
	PUSH	EDX
	MOV	EBX,W.BUF
	MOV	[W.LEFT],EBX

	MOV	EDX,USRDMA+R.BUF
	MOV	[W.PNT],EDX

	MOV	EBX,[HDL2]
	MOV	ECX,W.BUF
	MOV	AX,4000H	;write
	CALL	INT21_write	;INT	21H
	POP	EDX
	POP	ECX
	JB	ERR3

	CMP	EAX,W.BUF
	JNE	ERR3

	JMP	PUTC1

	JNB	PUTC1
	JMP	ERR3

;
;
;
FCBDEC:
	MOV	AL,[LOAD.F]
	SUB	AL,1
	JB	_RET
	MOV	[LOAD.F],AL

	MOV	ESI,[FCB]
	SUB	ESI,80
	MOV	[FCB],ESI

	MOV	BX,[ESI+70]
	MOV	[LIN.NO],BX

		MOV	EAX,[ESI+50]
		MOV	[S.LEFT],EAX
		MOV	EAX,[ESI+54]
		MOV	[S.PNT],EAX
		MOV	AL,[ESI+58]
		MOV	[FL.END],AL

		CMP	BYTE [LOAD.F],0
		JE	FCBDEC.05

	MOV	EBX,0
	MOV	[S.LEFT],EBX
	XOR	AL,AL
	MOV	[FL.END],AL

FCBDEC.05:

	PUSHAD
	MOV	EBX,[HDL]
	MOV	AX,3E00H	;close #
	CALL	INT21_close	;INT	21H

	MOV	ESI,[FCB]
	MOV	EBX,[ESI+72]
	MOV	[HDL],EBX

	CMP	BYTE [LOAD.F],0
	JE	FCBDEC.10

	MOV	EBX,[HDL]
	MOV	AX,4200H	;seek
	MOV	DX,[ESI+76]
	MOV	CX,[ESI+78]
	CALL	INT21_seek	;INT	21H
FCBDEC.10:
	POPAD

	CLC
	RET

;
;
;
PUTH4:	PUSH	EBX
	SHR	EBX,10H
	CALL	PUTH2
	POP	EBX
	CALL	PUTH2
	RET
;
;
;
PUTH2:	MOV	AL,BH
	CALL	PUTH1
	MOV	AL,BL
	CALL	PUTH1
	RET

;
;
;
PUTH1:	PUSH	EAX
	SHR	AX,4
	CALL	PUTHX
	POP	EAX
PUTHX:	AND	AL,0FH
	CMP	AL,10
	JB	PUTHX1
	ADD	AL,7
PUTHX1:	ADD	AL,'0'
	CALL	DOS02
	RET
;
;
;
CRLF:	MOV	AL,0DH
	CALL	DOS02
	MOV	AL,0AH
	CALL	DOS02
	RET
;
;
;
PUTDC:	PUSH	ESI
	MOV	ESI,WORKDC
	MOV	CX,10000
	CALL	PUTDC5
	MOV	CX,1000
	CALL	PUTDC5
	MOV	CX,100
	CALL	PUTDC5
	MOV	CX,10
	CALL	PUTDC5
	MOV	AL,BL
	ADD	AL,'0'
	MOV	[ESI],AL
	MOV	AL,'$'
	MOV	[WORKDC+5],AL
	MOV	EDX,WORKDC
	MOV	CH,4
PUTDC1:	MOV	AL,[EDX]	;CALL	LDADE
	CMP	AL,'0'
	JNE	PUTDC2
	INC	EDX
	DEC	CH
	JNE	PUTDC1
PUTDC2:	CALL	DOS09
	POP	ESI
	RET

PUTDC5:	MOV	DL,-1
	OR	AL,AL
PUTDC6:	INC	DL
	SBB	BX,CX
	JNB	PUTDC6
	ADD	BX,CX
	MOV	AL,DL
	ADD	AL,'0'
	MOV	[ESI],AL
	INC	ESI
	RET

;
;
;
UPPER:	CMP	AL,'a'
	JB	_RET
	CMP	AL,'z'+1
	JNB	_RET
	SUB	AL,20H
	RET

;-------------------------

MULT_HLDE:
	MOV	EAX,EBX
	MUL	EDX
	MOV	EBX,EAX

	RET
;
;
;

DIV_HLDE:
	PUSH	ECX
	PUSH	EAX
	MOV	EAX,EBX
	OR	EDX,EDX
	JE	DIV_HLDE.10

	MOV	ECX,EDX
	XOR	EDX,EDX
	DIV	ECX
	MOV	EBX,EAX
	POP	EAX
	POP	ECX
	RET

DIV_HLDE.10:
	MOV	EBX,0FFFFFFFFH
	POP	EAX
	POP	ECX
	RET


;#define INVALID_HANDLE_VALUE ((HANDLE)(LONG_PTR)-1)

INVALID_HANDLE_VALUE EQU -1




;
;3d00	open
;	edx=filename
;	>ax handle
;	>cf=1 : error
INT21_open:

	PUSHAD
	MOV	AL,'['
	CALL	DOS02
	MOV	ESI,EDX
	CALL	_PUTSTR
	MOV	AL,']'
	CALL	DOS02
	CALL	_PUTCRLF
	POPAD

	PUSH	0		;templateFile
	PUSH	FILE_ATTRIBUTE_NORMAL
	PUSH	OPEN_EXISTING	;CREATE_ALWAYS	;CREATE_NEW
	PUSH	0		;securityAttribute
	PUSH	0		;shareMode
	PUSH	GENERIC_READ
	PUSH	EDX		;FILENAME_TEST1
	CALL	[IAT_CreateFileA]
	CMP	EAX,INVALID_HANDLE_VALUE
	JE	INT21_open.ERR

	;MOV	[HDL_INFILE],EAX

	CLC
	RET
INT21_open.ERR:
	STC
	RET

;
;3c00	create
;	edx=filename
;	>ax handle
;	>cf=1 : error

;
INT21_create:

	PUSHAD
	MOV	AL,'['
	CALL	DOS02
	MOV	ESI,EDX
	CALL	_PUTSTR
	MOV	AL,']'
	CALL	DOS02
	CALL	_PUTCRLF
	POPAD

	PUSH	0		;templateFile
	PUSH	FILE_ATTRIBUTE_NORMAL
	PUSH	CREATE_ALWAYS	;CREATE_NEW
	PUSH	0		;securityAttribute
	PUSH	0		;shareMode
	PUSH	GENERIC_WRITE
	PUSH	EDX		;FILENAME_TEST1
	CALL	[IAT_CreateFileA]
	CMP	EAX,INVALID_HANDLE_VALUE
	JE	INT21_create.ERR

	;MOV	[HDL_OUTFILE],EAX

	CLC
	RET
INT21_create.ERR:
	STC
	RET


;#define FILE_BEGIN           0
;#define FILE_CURRENT         1
;#define FILE_END             2

;4200	seek
;	bx=handle
;	cx : dx offset
;
;	> dx : ax current pointer

INT21_seek:
		;PUSHAD
		;MOV	EDX,MES_SEEK
		;CALL	DOS09
		;POPAD

		;PUSHAD
		;CALL	PUTH4
		;POPAD

	SHL	ECX,10h
	MOV	CX,DX

	MOVZX	EAX,AL

	PUSH	EAX
	PUSH	0	;size<2GB
	PUSH	ECX
	PUSH	EBX
	CALL	[IAT_SetFilePointer]

	CMP	EAX,0FFFFFFFFH
	JE	ERR_seek

	MOV	EDX,EAX
	SHR	EDX,10H
	MOVZX	EAX,AX

	CLC

;erro check?

	RET

;MES_SEEK:DB	'(seek)$'

INT21_getfilepointer:
	


;
;3f00	read
;	bx=handle
;	edx=buf
;	ecx=bytes
;	>eax read bytes

INT21_read:
	
	PUSH	0
	PUSH	N_READ
	PUSH	ECX
	PUSH	EDX	;READ_BUF
	PUSH	EBX	;[HDL_STDOUT]
	CALL	[IAT_ReadFile]
	OR	EAX,EAX
	JE	INT21_read.ERR

	MOV	EAX,[N_READ]
	CLC
	RET
INT21_read.ERR:
	XOR	EAX,EAX
	STC
	RET

;4000	write
;	bx=handle
;	edx=buf
;	ecx=bytes
;	>eax wrote bytes
;	cf=1 : error	
;
;4000	write/truncate
;	ecx=edx=0
;	bx=handle

INT21_write:
	XOR	EAX,EAX
	MOV	AX,CX
	OR	AX,DX
	JE	INT21_truncate

	PUSH	0
	PUSH	N_WROTE
	PUSH	ECX
	PUSH	EDX	;READ_BUF
	PUSH	EBX	;[HDL_STDOUT]
	CALL	[IAT_WriteFile]
	OR	EAX,EAX
	JE	INT21_write.ERR

	MOV	EAX,[N_WROTE]

	CLC
	RET

INT21_write.ERR:
	XOR	EAX,EAX
	STC
	RET


INT21_truncate:
	PUSH	EBX
	CALL	[IAT_SetEndOfFile]
	RET


;3e00	close
;	bx=handle
;	cf=1 : error
INT21_close:

	PUSH	EBX
	CALL	[IAT_CloseHandle]
	OR	EAX,EAX
	JE	INT21_close.ERR

	CLC
	RET

INT21_close.ERR:
	STC
	RET


;4c	exit
;	al=code

INT21_exit:
	MOVZX	EAX,AL
	PUSH	EAX
	CALL	[IAT_ExitProcess]

	RET

INT21_putchr:
	CALL	_PUTCHR
	RET

INT21_putstr:
	;JMP	_DOS09


	PUSHAD
INT21_putstr.1:
	MOV	AL,[EDX]
	CMP	AL,'$'
	JE	INT21_putstr.2
	PUSH	EDX
	;CALL	DOS02
	MOV	DL,AL
	CALL	INT21_putchr
	POP	EDX
	INC	EDX
	JMP	INT21_putstr.1

INT21_putstr.2:
	POPAD
	RET

;
;	put chr direct to console
;
INT91_1D:
	PUSHAD
	CALL	DOS02
	POPAD
	RET
;
;
;
;
DOS02:
;	DB	60H
;	MOV	AH,02H
;	MOV	DL,AL
;	INT	21H
;	DB	61H

	PUSHAD

	CALL	_PUTCHR

	POPAD

	RET

DOS09:
;	PUSH	EAX
;	MOV	AH,09H
;	INT	21H
;	POP	EAX


	PUSHAD
DOS09.1:
	MOV	AL,[EDX]
	CMP	AL,'$'
	JE	DOS09.R
	PUSH	EDX
	CALL	DOS02
	POP	EDX
	INC	EDX
	JMP	DOS09.1

DOS09.R:
	POPAD
	RET

;
;
DOS09_Z:

	PUSHAD
DOS09_Z.1:
	MOV	AL,[EDX]
	OR	AL,AL
	JE	DOS09_Z.R
	PUSH	EDX
	CALL	DOS02
	POP	EDX
	INC	EDX
	JMP	DOS09_Z.1

DOS09_Z.R:
	POPAD
	RET

;not used
;DOS0F:	MOV	AX,3D00H
	INT	21H
	RET

;not used
;DOS10:	MOV	AX,3E00H
	INT	21H
	RET

;not used
;DOS16:	MOV	AX,3C00H
	INT	21H
	RET

;not used
;DOS26:	MOV	AX,4000H
	INT	21H
	RET

;not used
;DOS27:	MOV	AX,3F00H
	INT	21H
	RET

ERR_SEEK:
	MOV	EDX,EMES_SEEK
	JMP	ERR_STOP

ERR_ALLOC:
	MOV	EDX,EMES_ALLOC
	JMP	ERR_STOP

ERR0:	MOV	EDX,EMES0
	JMP	ERR_STOP

ERR1:	MOV	EDX,EMES1
	JMP	ERR_STOP

ERR2:	MOV	EDX,EMES2
	JMP	ERR_STOP

ERR3:	MOV	EDX,EMES3
	JMP	ERR_STOP

ERR4:	MOV	EDX,EMES4
	JMP	ERR_CONT

ERR5:	MOV	EDX,EMES5
	JMP	ERR_CONT

ERR6:	MOV	EDX,EMES6
	JMP	ERR_CONT

ERR7:	MOV	EDX,EMES7
	JMP	ERR_CONT

ERR8:	MOV	EDX,EMES8
	JMP	ERR_STOP

ERR9:	MOV	EDX,EMES9
	JMP	ERR_CONT

ERRA:	MOV	EDX,EMESA
	JMP	ERR_CONT

ERRB:	MOV	EDX,EMESB
	JMP	ERR_CONT

ERRC:	MOV	EDX,EMESC
	JMP	ERR_STOP

ERRD:	MOV	EDX,EMESD
	JMP	ERR_STOP
;
;
;
ERRSUB:
	PUSH	EDX

	MOV	BX,[LIN.NO]
	CALL	PUTDC
	MOV	AL,':'
	CALL	DOS02
	POP	EDX
	CALL	DOS09
	MOV	AL,' '
	CALL	DOS02
	CALL	PUTLIN
	CALL	CRLF
	RET

;
;
;

STRCPY:	CLD
STRCPY.10:
	LODSB
	CMP	AL,20H
	JE	STRCPY.20
	CMP	AL,'/'
	JE	STRCPY.20
	STOSB
	OR	AL,AL
	JNE	STRCPY.10
	RET

STRCPY.20:
	XOR	AL,AL
	STOSB
	RET

;
;
STRCAT:
	LODSB
	OR	AL,AL
	JNE	STRCAT
	DEC	ESI

	XCHG	ESI,EDI
STRCAT.10:
	LODSB
	STOSB
	OR	AL,AL
	JNE	STRCAT.10
	RET

;
LDDEA:	PUSH	EBX
	MOV	EBX,EDX
	MOV	[EBX],AL
	POP	EBX
	RET

;
LDADE:	PUSH	EBX
	MOV	EBX,EDX
	MOV	AL,[EBX]
	POP	EBX
	RET
;
LDI:	PUSH	ESI
	PUSH	EDI

	MOV	ESI,EBX
	MOV	EDI,EDX
	CLD
	MOVSB
	MOV	EBX,ESI
	MOV	EDX,EDI

	POP	EDI
	POP	ESI
	RET


;
LDIR:	PUSH	ESI
	PUSH	EDI

	MOV	ESI,EBX
	MOV	EDI,EDX
	CLD
	REP
	MOVSB
	MOV	EBX,ESI
	MOV	EDX,EDI

	POP	EDI
	POP	ESI
	RET
;

_RET:	RET
;
;
;

GETCLINE:
	JMP	GETCLINE_win

	PUSH	DS
	MOV	AX,DS
	MOV	ES,AX

	MOV	AX,4
	MOV	DS,AX

	MOV	ESI,0080H
	MOV	EDI,CLINE
	MOV	ECX,80H
	CLD
	REP
	MOVSB
	POP	DS

	MOV	ESI,CLINE
	MOV	EDI,ESI
	CLD
	LODSB
	XOR	ECX,ECX
	MOV	CL,AL
	INC	EDI
	ADD	EDI,ECX

	XOR	EAX,EAX
	STOSB
	RET

GETCLINE_win:
	PUSH	DS
	MOV	AX,DS
	MOV	ES,AX

	;MOV	AX,4
	;MOV	DS,AX

	MOV	ESI,[CMDLINE]
GETCLINE_win.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	GETCLINE_win.20
	CMP	AL,' '
	JBE	GETCLINE_win.20
	INC	ESI
	JMP	GETCLINE_win.10

GETCLINE_win.20:

;	;MOV	ESI,0080H
;	MOV	EDI,CLINE
;	MOV	ECX,80H
;	CLD
;	REP
;	MOVSB

	MOV	EDI,CLINE
GETCLINE_win.30:
	MOV	AL,[ESI]
	CMP	AL,20h
	JB	GETCLINE_win.40
	MOV	[EDI],AL
	INC	ESI
	INC	EDI
	OR	AL,AL
	JMP	GETCLINE_win.30

GETCLINE_win.40:
	MOV	AL,0
	MOV	[EDI],AL
	POP	DS

	RET

	MOV	ESI,CLINE
	MOV	EDI,ESI
	CLD
	LODSB
	XOR	ECX,ECX
	MOV	CL,AL
	INC	EDI
	ADD	EDI,ECX

	XOR	EAX,EAX
	STOSB
	RET


;
;	ESI:pnt to string
;
STRLEN:
	PUSH	ECX
	PUSH	ESI

	XOR	ECX,ECX
STRLEN.10:
	MOV	AL,[ESI]
	OR	AL,AL
	JE	STRLEN.R
	INC	ESI
	INC	ECX
	JMP	STRLEN.10

STRLEN.R:
	MOV	EAX,ECX

	POP	ESI
	POP	ECX
	RET


