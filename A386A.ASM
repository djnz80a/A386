
A386	EQU 1

PUT_DEBUG_ATTR_SIZE EQU 0


	ORG	00400000h

IMAGE_BASE equ	00400000h

BASE:

#INCLUDE <HEADER-C.ASM>
;
;	+PUSH/POP FS/GS
;	+MOV ,FS/GS	MOV GS/GS,

	;;ORG	0

linesize equ	1024

R.BUF	EQU	8000H;1000H	;buffer for read
W.BUF	EQU	8000H;800H	;buffer for write

;W.LBL	EQU	40000h;100h;6000H;8000H	;label
W.LBL	EQU	USRDMA+R.BUF+W.BUF+R.BUF
;EOM	EQU	60000h;0FF00H	;0E000H	;end of memory
EOM	EQU	W.LBL+20000h-100h

ENTRY_MAIN:
A386_MAIN:
	;MOV	ESI,MES1
	;CALL	_PUTSTR
	;jmp	testjump

	JMP	A386_MAIN.10

	MOV	EDX,MES1
	JMP	DOS09
	CALL	DOS09

	CALL	[IAT_ExitProcess]

	RET


A386_MAIN.10:
	;CLI
	;mov	esp,80000h
	;STI
	CLD

	CALL	GETCLINE

	MOV	EAX,DS
	MOV	ES,EAX

	MOV	ESI,CLINE+1
	MOV	EDI,FILE1
	CALL	STRCPY

	XOR	AX,AX
	MOV	[FLG.1],AL
	MOV	[FLG.2],AL
	MOV	[FLG.3],AL

	MOV	CL,0
	MOV	[FLG.1],CL

	MOV	ESI,FILE1
	MOV	EDI,FILE2
	CALL	STRCPY

	MOV	ESI,FILE1
	MOV	EDI,STR_ASM
	CALL	STRCAT


I3:
	MOV	EDX,MES1
	CALL	DOS09

	XOR	AL,AL
	MOV	[F.TYPE],AL

	;MOV	SI,0081H
	MOV	ESI,CLINE+1

SW:	MOV	AL,[ESI]
	INC	ESI
	OR	AL,AL
	JE	SW90

	CMP	AL,'/'
	JNE	SW
	MOV	AL,[ESI]
		CALL	UPPER
	INC	ESI
	CMP	AL,'3'
	JNE	SW.10
	MOV	AL,0FFH
	MOV	[FLG.386],AL
	MOV	[FLG.DWORD],AL
	JMP	SW

SW.10:	CMP	AL,'L'
	JNE	SW.20
	MOV	AL,0FFH
	MOV	[FLG.L],AL
	JMP	SW

SW.20:	CMP	AL,'P'
	JNE	SW.30
	MOV	AL,0FFH
	MOV	[FLG.P],AL
	JMP	SW

SW.30:
	CMP	AL,'E'
	JNE	SW.40
	MOV	AL,0FFH
	MOV	[FLG.E],AL
SW.40:
	CMP	AL,'J'
	JNE	SW.50
	MOV	BYTE [FLG.J],0FFH	;jump shorten
	JMP	SW


SW.50:
	CMP	AL,'D'
	JNE	SW.60
	MOV	AL,0FFH
	MOV	[FLG.D],AL
	JMP	SW

SW.60:
	CMP	AL,'W'
	JNE	SW.70
	MOV	AL,0FFH
	MOV	[FLG.W],AL
	JMP	SW

SW.70:
	JMP	SW

SW90:
	CMP	BYTE [FLG.E],0
	JNE	SW90.EXP

	MOV	ESI,FILE2
	MOV	EDI,STR_COM
	CALL	STRCAT
	JMP	SW90.EXP.E
SW90.EXP:
	MOV	ESI,FILE2
	MOV	EDI,STR_EXP
	CALL	STRCAT

SW90.EXP.E:
	MOV	EDX,FILE1
	MOV	AX,3D00H	;open
	CALL	INT21_open	;INT	21H
	JB	ERR0
	MOV	[HDL],EAX

	MOV	EDX,FILE2
	MOV	CX,0
	MOV	AX,3C00H	;create
	CALL	INT21_create	;INT	21H
	JB	ERR2	;ERR0
	MOV	[HDL2],EAX

	MOV	AL,0FFH
	MOV	[FLAG_FILE2],AL

	MOV	EBX,W.BUF
	MOV	[W.LEFT],EBX
	MOV	EBX,USRDMA+R.BUF
	MOV	[W.PNT],EBX

	MOV	EBX,LBL.PNT.TOP
	MOV	ECX,400H+400H	;200H+200H
INIT50:	XOR	AL,AL
	MOV	[EBX],AL
	INC	EBX
	LOOP	INIT50

MAIN:	MOV	AL,1
	MOV	[PASS],AL
	CALL	ASM

	CALL	PUT.L

		MOV	EAX,[O.ADR1]
		MOV	[PREV_O.ADR1],EAX
MAIN.OPTJ.L1:
	MOV	AL,2
	MOV	[PASS],AL
	CALL	ASM

		CMP	BYTE [FLG.J],0
		JE	MAIN.OPTJ.E

		MOV	EAX,[O.ADR1]
		CMP	EAX,[PREV_O.ADR1]
		MOV	[PREV_O.ADR1],EAX
		JE	MAIN.OPTJ.E

		MOV	EBX,W.BUF
		MOV	[W.LEFT],EBX
		MOV	EBX,USRDMA+R.BUF
		MOV	[W.PNT],EBX

		MOV	CX,0
		MOV	DX,0
		MOV	AX,4200H	;seek
		MOV	EBX,[HDL2]
		CALL	INT21_seek	;INT	21H

		JMP	MAIN.OPTJ.L1

MAIN.OPTJ.E:

	MOV	EBX,W.BUF
	MOV	EDX,[W.LEFT]
	SUB	EBX,EDX
	JE	I10

	MOV	ECX,EBX
	MOV	EDX,USRDMA+R.BUF
	MOV	EBX,[HDL2]
	MOV	AX,4000H	;write
	PUSH	ECX
	CALL	INT21_write	;INT	21H
	POP	ECX
	JB	ERR3

	CMP	EAX,ECX
	JNE	ERR3

;	JB	ERR3
I10:
		MOV	AX,4000H
		MOV	EBX,[HDL2]
		MOV	ECX,0		;truncate
		MOV	EDX,0
		CALL	INT21_truncate	;INT	21H

I12:
	CMP	BYTE [FLG.E],0
	JE	I12.EXP

	CALL	WRITE_EXP_HEADER

I12.EXP:

	CMP	BYTE [FLG.W],0
	JE	I12.WIN

	CALL	WRITE_WIN_HEADER

	MOV	EBX,[HDL2]
	MOV	ECX,0
	MOV	EDX,0
	;MOV	AX,4201H	;seek
	MOV	AX,4202h
	;INT	21H		;>dx:ax
	CALL	INT21_seek


I12.WIN:

	CALL	PUT_DEBUG

	CALL	WRITE_COFF_DEBUG_HEADER

	MOV	EBX,[HDL2]
	MOV	AX,3E00H	;close
	CALL	INT21_close	;INT	21H
	JB	ERR3

	XOR	AL,AL
	MOV	[FLAG_FILE2],AL

	MOV	EDX,MES10
	CALL	DOS09

	MOV	EBX,[O.ADR1]
	DEC	EBX
	PUSH	EBX
	SHR	EBX,10H
	MOV	AL,BH
	CALL	PUTH1
	MOV	AL,BL
	CALL	PUTH1

	POP	EBX
	MOV	AL,BH
	CALL	PUTH1
	MOV	AL,BL
	CALL	PUTH1

	CALL	CRLF

	MOV	EDX,MES11
	CALL	DOS09

	MOV	BX,[LBL.NO]
	CALL	PUTDC


	CALL	CRLF

	CALL	PUT.L

EXIT:
	MOV	AH,4CH
	CALL	INT21_exit	;INT	21H


#INCLUDE <WRWIN-A.ASM>
#INCLUDE <WRCOFF-C.ASM>
#INCLUDE <PUTDEB-C.ASM>

;
;
;
PUT.L:
	MOV	AL,[FLG.L]
	OR	AL,AL
	JE	PUT.L.E

	MOV	DX,[LBL.NO]
	OR	DX,DX
	JE	PUT.L.E
	MOV	EBX,W.LBL
PUT.L0:	MOV	CH,[EBX]		;len
	INC	EBX
	INC	EBX		;link pnt skip
	INC	EBX
PUT.L1:	MOV	AL,[EBX]		;string
	CALL	PUT.L20
	INC	EBX
	DEC	CH
	JNE	PUT.L1

	MOV	AL,09H
	CALL	PUT.L20
	MOV	AL,[EBX]		;value

	mov	al,[ebx+3]
	call	put.l30
	mov	al,[ebx+2]
	call	put.l30
	mov	al,[ebx+1]
	call	put.l30
	mov	al,[ebx]
	call	put.l30
	add	bx,3

	MOV	AL,0DH
	CALL	PUT.L20
	MOV	AL,0AH
	CALL	PUT.L20
	INC	EBX
	DEC	DX
	OR	DX,DX
	JNE	PUT.L0

PUT.L.E:
	RET



;

ASM:
		MOV	BYTE [COND],0

	XOR	AL,AL
	MOV	[LOAD.F],AL

	MOV	EBX,FILE1+80
	MOV	[FCB],EBX
	MOV	ESI,FILE1
	MOV	EDI,FILE1+80
	CALL	STRCPY

	MOV	CX,0
	MOV	DX,0
	MOV	AX,4200H	;seek
	MOV	EBX,[HDL]
	CALL	INT21_seek	;INT	21H


PNO:	MOV	EDX,MES2
	CALL	DOS09
	MOV	AL,[PASS]
	ADD	AL,'0'
	CALL	DOS02
	CALL	CRLF

	CMP	BYTE [PASS],2
	JNE	PNO.WIN

	CMP	BYTE [FLG.E],0
	JE	PNO.EXP

	MOV	AX,4000H
	MOV	EBX,[HDL2]
	MOV	ECX,200H
	MOV	EDX,USRDMA	;just for seek
	CALL	INT21_write	;INT	21H

PNO.EXP:
	CMP	BYTE [FLG.W],0
	JE	PNO.WIN

	MOV	AX,4000H
	MOV	EBX,[HDL2]
	MOV	ECX,FILE_ALIGN
	MOV	EDX,HEADER_BUF	;just for seek
	CALL	INT21_write	;INT	21H


PNO.WIN:
	MOV	EBX,0000H
	MOV	[O.ADR1],EBX
	MOV	EBX,0000H
	MOV	[O.ADR2],EBX
	MOV	[O.BYTE],EBX

	MOV	BX,1
	;
	MOV	[LIN.NO],BX

	MOV	EBX,W.LBL
	MOV	[LBL.NX],EBX
	MOV	AL,[PASS]
	DEC	AL
	JNE	PNO2
	MOV	BX,0
	MOV	[LBL.NO],BX
	MOV	[ERR.NO],BX
PNO2:
	MOV	EBX,0
	MOV	[S.LEFT],EBX
	XOR	AL,AL
	MOV	[FL.END],AL

	JMP	MAIN01

;

M10:
	MOV	ESI,L.DATA
	MOV	AL,[ESI]
	CMP	AL,09H
	JE	MAIN10
	CMP	AL,' '
	JE	MAIN10
	OR	AL,AL
	JE	MAIN50
	CMP	AL,';'
	JE	MAIN50
;

M11:	CALL	UPPER
	CMP	AL,' '+1
	JB	ERR4
	CMP	AL,':'
	JE	ERR4
;
	MOV	EBX,WORK1
	XOR	AL,AL
	MOV	[EBX],AL
	INC	EBX
	MOV	CH,80+2	;40+2
	MOV	AL,' '
M10.1:	MOV	[EBX],AL
	INC	EBX
	DEC	CH
	JNE	SHORT M10.1

	MOV	EDX,WORK1+1
	MOV	CH,80	;40
LBLS10:	MOV	AL,[ESI]
	CALL	UPPER
	CMP	AL,':'
	JE	LBLS17
	CMP	AL,09H
	JE	L.EQU
	CMP	AL,' '
	JE	L.EQU

		OR	AL,AL
		JE	SUBCOM2

;
	CMP	AL,';'
	JE	ERR4
	MOV	[EDX],AL	;CALL	LDDEA
	INC	ESI
	INC	EDX
	DEC	CH
	JNE	LBLS10

LBLS15:	MOV	AL,[ESI]
	CALL	UPPER
	CMP	AL,':'
	JE	LBLS17
	CMP	AL,09H
	JE	L.EQU
	CMP	AL,' '
	JE	L.EQU
	CMP	AL,' '+1
	JB	ERR4

;
	CMP	AL,';'
	JE	ERR4
	INC	ESI
	JMP	LBLS15

LBLS17:	MOV	AL,80	;40
	SUB	AL,CH
	MOV	[WORK1],AL
	JMP	LBLS20

;--------

L.EQU:	MOV	AL,80	;40
	SUB	AL,CH
	MOV	[WORK1],AL
	CALL	S.SKIP
	JE	ERR6
	MOV	CL,'E'
	CALL	L.EQU2
	MOV	CL,'Q'
	CALL	L.EQU2
	MOV	CL,'U'
	CALL	L.EQU2

;
	MOV	AL,[ESI]
	INC	ESI
	CMP	AL,09H
	JE	L.EQU1
	CMP	AL,' '
	JE	L.EQU1
	JMP	SUBCOM
L.EQU1:
	CALL	S.SKP2
	JE	ERR6
	PUSH	EDX
	CALL	GET.NO
	POP	EDX
;
	DEC	ESI
	CALL	S.SKIP
	JNE	ERR6
	DEC	ESI
	MOV	EBX,EDX
	MOV	EDX,[VAL1]
	MOV	[EBX],EDX
	JMP	LBLS25


LBLS20:
	CMP	BYTE [COND],80H
	JE	MAIN50

	MOV	EBX,EDX
	MOV	EDX,[O.ADR1]
;	AND	EDX,0FFFFH	;#
	MOV	[EBX],EDX

;

LBLS25:	MOV	EBX,WORK1
	MOV	[PNT2],EBX
	CALL	SRCHL
	JB	LBLS32

	MOV	AL,[PASS]
	DEC	AL
	JE	ERR5		;Multiply defined label
	OR	AL,AL

;LBLS30:
	MOV	EBX,[PNT2]	;set again
	PUSHFD
	JMP	LBLS35

LBLS32:	PUSHFD
	MOV	EBX,[LBL.NX]	;newly set

LBLS35:	XCHG	EDX,EBX		;DX=BX

	CALL	SET.LBL

	POPFD
	JNB	LBLS36		;if set again

	MOV	[LBL.NX],EDX

	INC	WORD [LBL.NO]

	CMP	DWORD [LBL.NX],EOM		;0D000H end of memory
	JNB	ERR8

	JMP	LBLS36



;*************************************

OP.TBL:	DEFB	8
	DD	PNT.A
	DEFB	2
	DD	PNT.B
	DEFB	9
	DD	PNT.C
	DEFB	13
	DD	PNT.D
	DEFB	1
	DD	PNT.E
	DEFB	0
	DD	0	;F
	DEFB	0
	DD	0	;G
	DEFB	0
	DD	PNT.H
	DEFB	6
	DD	PNT.I
	DEFB	30
	DD	PNT.J
	DEFB	0
	DD	0	;K
	DEFB	8+3	;+lgdt+lidt+lldt
	DD	PNT.L

	DEFB	7
	DD	PNT.M	;M

	DEFB	3+1	;+native
	DD	PNT.N
	DEFB	3
	DD	PNT.O
	DEFB	10
	DD	PNT.P
	DEFB	0
	DD	0	;Q
	DEFB	10+1	;real
	DD	PNT.R
	DEFB	16+16+3	;+SETCC+sgdt+sidt+sldt
	DD	PNT.S
	DEFB	1
	DD	PNT.T	;T
	DEFB	0
	DD	0	;U
	DEFB	0
	DD	0	;V
	DEFB	0
	DD	0	;W
	DEFB	3
	DD	PNT.X
	DEFB	0
	DD	0	;Y
	DEFB	0
	DD	0	;Z






PNT.E:	DB	'ND   '
	DD	C.END










PNT.P:	DB	'USH  '
	DD	C.PUSH
	DB	'OP   '
	DD	C.POP
	DB	'USHF '
	DD	C.PUSHF
	DB	'OPF  '
	DD	C.POPF
	DB	'USHFD'
	DD	C.PUSHFD
	DB	'OPFD '
	DD	C.POPFD
	DB	'USHA '
	DD	C.PUSHA
	DB	'OPA  '
	DD	C.POPA
	DB	'USHAD'
	DD	C.PUSHAD
	DB	'OPAD '
	DD	C.POPAD





;J.TBL1:





;
;
;
C.DD:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
C.DD1:
	;MOV	BX,[VAL1]
	;CALL	SETD2
	;MOV	BX,[VAL1+2]
	;CALL	SETD2
	MOV	EBX,[VAL1]
	CALL	SETD4

	DEC	ESI
	CALL	S.SKIP
	JE	MAIN20
	CALL	OPCOD2
	JMP	C.DD1



;
;
;
TERM2:	CALL	OPCODE

TERM2.SUB:
	MOV	CH,AL
	MOV	AL,[PRE_SIZE]
	MOV	[PRE_SIZE1],AL
	PUSH	ECX

	MOV	EBX,[VAL1]
	PUSH	EBX

	CALL	OPCOD2
	MOV	BL,[PRE_SIZE]
	;MOV	[PRE_SIZE2],AL
		MOV	[PRE_SIZE2],BL	;###
	MOV	EBX,[VAL1]
	MOV	[VAL2],EBX

	POP	EBX
	MOV	[VAL1],EBX

	POP	ECX
	MOV	CL,AL
	RET



;	AL:30H+00 mod r/m
;	DL:00 ??? 000
;
	DB	'MEM'

MEM:
	PUSH	ECX
	PUSH	EBX
	PUSH	EAX

	CALL	CVMOD
	OR	AL,DL
	CALL	SETDAT
	CALL	IS386
	JE	MEM_3

	AND	AL,0C7H
	CMP	AL,00000110B	;[nn]
	JE	MEM.W
	AND	AL,0C0H
	CMP	AL,40H
	JE	MEM.B
	CMP	AL,80H
	JE	MEM.W
	JMP	MEM.E

MEM_3:	CMP	AL,10000101B	;[EBP+nnnn]
	JE	MEM.D
	CMP	AL,01000101B	;[EBP+n]
	JE	MEM.B

	AND	AL,0C7H
	CMP	AL,00000101B	;[nnnn]
	JE	MEM.D
	CMP	AL,00000100B	;[+0]
	JE	MEM.0

	CMP	AL,10000100B	;[+nnnn]
	JE	MEM.0.N32
	AND	AL,0C0H
	CMP	AL,40H
	JE	MEM.B
	CMP	AL,80H
	JE	MEM.D
	JMP	MEM.E

MEM.0:	MOV	AL,[MOD2]
	MOV	BL,AL
	AND	BL,07H
	CMP	BL,101B	;nnnn[]
	JE	MEM.0.10
	CALL	SETDAT
	JMP	MEM.E
MEM.0.10:
	CALL	SETDAT
	JMP	MEM.D

;MEM.0.N8:
;	MOV	AL,[MOD2]
;	CALL	SETDAT
;	JMP	MEM.B

MEM.0.N32:
	MOV	AL,[MOD2]
	CALL	SETDAT
	JMP	MEM.D

MEM.B:	MOV	AL,[ESI]
	CALL	SETDAT
	JMP	MEM.E

MEM.W:	MOV	BX,[ESI]		;VAL1/VAL2
	CALL	SETD2
	JMP	MEM.E

MEM.D:
	;MOV	BX,[SI]
	;CALL	SETD2
	;INC	ESI
	;INC	ESI
	;MOV	BX,[SI]
	;CALL	SETD2
	MOV	EBX,[ESI]
	CALL	SETD4
	JMP	MEM.E


MEM.E:
	POP	EAX
	POP	EBX
	POP	ECX
	RET



;

SETV1:	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	ESI,VAL1
	JMP	SETVAL

SETV2:	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	ESI,VAL2
	JMP	SETVAL

;

SETVAL:	TEST	AL,01H
	JNE	SETVAL.10

	MOV	AL,[ESI]
	CALL	SETDAT
	JMP	SETVAL.E
SETVAL.10:
	CALL	ISDWORD
	JE	SETVAL.15
	MOV	BX,[ESI]
	CALL	SETD2
	JMP	SETVAL.E
SETVAL.15:
	;MOV	BX,[SI]
	;CALL	SETD2
	;INC	ESI
	;INC	ESI
	;MOV	BX,[SI]
	;CALL	SETD2
	MOV	EBX,[ESI]
	CALL	SETD4
SETVAL.E:
	POP	EAX
	POP	EBX
	POP	ESI
	RET

;

SETA1:	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	ESI,VAL1
	JMP	SETADRS

SETA2:	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	ESI,VAL2
	JMP	SETADRS

;
CALREL:
	MOV	EBX,[VAL1]
	MOV	EDX,[O.ADR1]
	INC	EDX
	INC	EDX
	CALL	ISDWORD
	JE	CALREL.10
	SUB	EBX,EDX
	RET

CALREL.10:
	INC	EDX
	INC	EDX
	SUB	EBX,EDX
	RET
;
CALREL.EXTRN:
	MOV	EBX,1000H
	RET

;

RELADRS:
	MOV	EBX,[VAL1]
	MOV	EDX,[O.ADR1]
	INC	EDX
	INC	EDX
	CALL	ISDWORD
	JE	RELADRS.10
	SUB	EBX,EDX
	CALL	SETD2
	RET
RELADRS.10:
	INC	EDX
	INC	EDX
	SUB	EBX,EDX

		CALL	SETD4
		RET

	PUSH	EBX

	CALL	SETD2

	POP	EBX
	SHR	EBX,10H

	CALL	SETD2
	RET


;

SETADRS:
	CALL	IS386
	JE	SETADRS.15
	MOV	BX,[ESI]
	CALL	SETD2
	JMP	SETADRS.E
SETADRS.15:
	;MOV	BX,[SI]
	;CALL	SETD2
	;INC	ESI
	;INC	ESI
	;MOV	BX,[SI]
	;CALL	SETD2
	MOV	EBX,[ESI]
	CALL	SETD4
SETADRS.E:
	POP	EAX
	POP	EBX
	POP	ESI
	RET


;	set AL

SETD1:	CALL	SETDAT
	JMP	MAIN20





	

;

CODE10:	MOV	[PNT],ESI
	MOV	EDX,WORK2+1
	MOV	CH,80	;40
	MOV	AL,[ESI]

		CMP	AL,'_'
		JE	SHORT CD90

	CMP	AL,'9'+1
	JNB	CODE11
	CMP	AL,'+'	;#
	JE	CD90
	CMP	AL,'-'
	JE	CD90
	CMP	AL,27H
	JE	CD90
	CMP	AL,'$'
	JE	CD90
	CMP	AL,'0'
	JB	CODE11
CD90:	CALL	GET.NO
	MOV	CH,50H
	JMP	CODE90

CODE11:	MOV	AL,[ESI]
	CMP	AL,'}'
	JE	CODE12
	CMP	AL,'['
	JE	CODE12	;#
	CMP	AL,']'
	JE	CODE12
	CMP	AL,'@'
	JNB	CDE110
	OR	AL,AL
	JE	CODE12
	CMP	AL,09H
	JE	CODE12
	CMP	AL,' '
	JE	CODE12
	CMP	AL,';'
	JE	CODE12
	CMP	AL,','
	JE	CODE12
	CMP	AL,'*'
	JE	CODE12	;#
	CMP	AL,'+'
	JE	CODE12
	CMP	AL,'-'
	JE	CODE12
CDE110:	CALL	UPPER
	MOV	[EDX],AL	;CALL	LDDEA
	INC	ESI
	INC	EDX
	DEC	CH
	JNE	CODE11
	JMP	ERR6
CODE12:	MOV	AL,80	;40
	SUB	AL,CH
	MOV	[LEN],AL

CODE02:	MOV	CL,[LEN]

;

CODE15:
	CMP	CL,3
	JNB	CODEL3

	MOV	EBX,C.DAT2
	MOV	CH,00H
	;MOV	EDX,WORK2+1
	MOV	AX,[WORK2+1]
CODE16:
	;MOV	AX,[EDX]	;CALL	LDADE
	CMP	AX,[EBX]	;DB	3AH,07H
	JE	CODE18.50

CODE18:	INC	EBX
	INC	EBX
	INC	CH
	CMP	CH,14H+2	;add FS,GS
	JNE	CODE16

	JMP	CODEL3


CODE18.50:
	CMP	CH,08H
	MOV	AL,1
	JB	CODE18.52
	MOV	AL,2
CODE18.52:
	MOV	[PRE_SIZE],AL

	CMP	CH,08H
	JB	CODE18.54
	CMP	CH,10H
	JNB	CODE18.54
	MOV	AL,00H
	MOV	[FLG2.DWORD],AL
CODE18.54:
	JMP	CODE20
;--------------
CODEL3:
	CMP	CL,4
	JNB	CODEL4

	CMP	BYTE [WORK2+3],':'
	JNE	CODEL3.SEG.E

	MOV	AX,[WORK2+1]
	CMP	AX,'SC'
	MOV	BL,2EH
	JE	CODEL3.SEG.10
	CMP	AX,'SD'
	MOV	BL,3EH
	JE	CODEL3.SEG.10
	CMP	AX,'SE'
	MOV	BL,26H
	JE	CODEL3.SEG.10
	CMP	AX,'SS'
	MOV	BL,36H
	JE	CODEL3.SEG.10
	JMP	CODEL3.SEG.E

CODEL3.SEG.10:
	MOV	[PRE_SEG],BL
	CALL	OPCODE
	RET



CODEL3.SEG.E:

	MOV	EBX,C.DAT3	;EAX..
	MOV	CH,08H
	;MOV	EDX,WORK2+1
	MOV	EAX,[WORK2+1]
	AND	EAX,00FFFFFFH
CODEL3.10:
	MOV	EDX,[EBX]
	AND	EDX,00FFFFFFH
	CMP	EDX,EAX
	JE	CODEL3.50

CODEL3.20:
	INC	EBX
	INC	EBX
	INC	EBX
	INC	CH
	CMP	CH,10H
	JNE	CODEL3.10

	PUSH	ESI
	PUSH	EDI
	MOV	ESI,WORK2+1
	MOV	EDI,STR_FAR
	CALL	STRCMP
	POP	EDI
	POP	ESI
	JE	CODE_FAR

	JMP	CODEL4




CODEL3.50:
	MOV	AL,0FFH
	MOV	[FLG2.DWORD],AL
	MOV	AL,4
	MOV	[PRE_SIZE],AL
	JMP	CODE20

;

CODEL4:

	CMP	CL,5
	JNB	CODEL5

	PUSH	ESI
	PUSH	EDI
	MOV	ESI,WORK2+1
	MOV	EDI,STR_BYTE
	CALL	STRCMP
	POP	EDI
	POP	ESI
	JE	CODE_BYTE

	PUSH	ESI
	PUSH	EDI
	MOV	ESI,WORK2+1
	MOV	EDI,STR_WORD
	CALL	STRCMP
	POP	EDI
	POP	ESI
	JE	CODE_WORD

	JMP	CODE19B



CODEL5:
	CMP	CL,6
	JNB	CODE19B

	PUSH	ESI
	PUSH	EDI
	MOV	ESI,WORK2+1
	MOV	EDI,STR_DWORD
	CALL	STRCMP
	POP	EDI
	POP	ESI
	JE	CODE_DWORD

	PUSH	ESI
	PUSH	EDI
	MOV	ESI,WORK2+1
	MOV	EDI,STR_SHORT
	CALL	STRCMP
	POP	EDI
	POP	ESI
	JE	CODE_SHORT

	JMP	CODE19B



;----------------

CODE19B:
	XOR	EBX,EBX
	MOV	[VAL1],EBX
	MOV	ESI,[PNT]
	CALL	GET.NO
CODE1A:
	DEC	ESI
	CALL	L.SKIP
	MOV	CH,50H
	JMP	CODE90

CODE20:

CODE90:	MOV	AL,CH
	OR	AL,AL
	RET
CODE99:	MOV	AL,0FFH
	STC
	RET




;
;
;
PUTLIN:	MOV	EBX,L.DATA
LOOP2:	MOV	AL,[EBX]
	OR	AL,AL
	JE	_RET
	CMP	AL,1AH
	JE	_RET
	INC	EBX
	CALL	DOS02
	JMP	LOOP2

;
;	AL:code
;
;
;	?none
;
	ALIGN	4

SETDAT:
	INC	DWORD [O.ADR2]

	CMP	BYTE [PASS],1
	JE	SETDAT.10

	pushaD
	CALL	PUTCHR
	popaD
SETDAT.10:
	INC	DWORD [O.ADR1]

	INC	DWORD [O.BYTE]
	RET


;-------------------------
GET.NO:
	XOR	EBX,EBX
	MOV	[VAL1],EBX
	CALL	GET.NO_ADD
	MOV	[VAL1],EBX
	OR	AL,AL
	RET

GET.NO_ADD:
	CALL	GET.NO_MULT
GET.NO_ADD.1:
	MOV	AL,[ESI]
	CMP	AL,'+'
	JNE	GET.NO_SUB
	INC	ESI
	PUSH	EBX
	CALL	GET.NO_MULT
	POP	EDX
	ADD	EBX,EDX
	JMP	GET.NO_ADD.1
GET.NO_SUB:
	CMP	AL,'-'
	JNE	_RET
	INC	ESI
	PUSH	EBX
	CALL	GET.NO_MULT
	POP	EDX
	XCHG	EDX,EBX
	SUB	EBX,EDX
	JMP	GET.NO_ADD.1
;
;
GET.NO_MULT:
	CALL	GET.NO_FACT
GET.NO_MULT.1:
	MOV	AL,[ESI]
	CMP	AL,'*'
	JNE	GET.NO_DIV
	INC	ESI
	PUSH	EBX
	CALL	GET.NO_FACT
	POP	EDX
	CALL	MULT_HLDE
	JMP	GET.NO_MULT.1
GET.NO_DIV:
	CMP	AL,'/'
	JNE	_RET
	INC	ESI
	PUSH	EBX
	CALL	GET.NO_FACT
	XCHG	EDX,EBX
	POP	EBX
	CALL	DIV_HLDE
	JMP	GET.NO_MULT.1

GET.NO_FACT:
	MOV	AL,[ESI]
	CMP	AL,'+'
	JNE	GET.NO_FACT1
	INC	ESI
	JMP	GET.NO_FACT2
GET.NO_FACT1:
	CMP	AL,'-'
	JNE	GET.NO_FACT2
	INC	ESI
	CALL	GET.NO_FACT2
	NEG	EBX
	RET

GET.NO_FACT2:
	MOV	AL,[ESI]
	CMP	AL,'{'
	JNE	GET.NO_FACT3
	INC	ESI
	CALL	GET.NO_ADD
	MOV	AL,[ESI]
	CMP	AL,'}'
	JNE	ERR6
	INC	ESI
	OR	AL,AL
	RET
GET.NO_FACT3:
;
;

GET.NO_FACT5:
	MOV	AL,[ESI]
	CMP	AL,' '
	JNE	GET.NO_FACT6
	INC	ESI
	JMP	GET.NO_FACT5

GET.NO_FACT6:

	MOV	EDX,WORK2+1
GN10:	MOV	AL,[ESI]
	CMP	AL,27H
	JE	GETN60
	CMP	AL,'"'
	JE	GETN60
	CMP	AL,'$'
	JE	GETN70

	MOV	CH,80	;40
GETN05:	MOV	AL,[ESI]
	CMP	AL,';'
	JE	GETN20
	OR	AL,AL
	JE	GETN20
	CMP	AL,09H
	JE	GETN20
	CMP	AL,' '
	JE	GETN20
	CMP	AL,','
	JE	GETN20
	CMP	AL,'+'
	JE	GETN20
	CMP	AL,'-'
	JE	GETN20
	CMP	AL,'*'
	JE	GETN20
	CMP	AL,'/'
	JE	GETN20
	CMP	AL,'['	;#
	JE	GETN20
	CMP	AL,']'
	JE	GETN20
	CMP	AL,'}'
	JE	GETN20
GETN06:	CALL	UPPER
	MOV	[EDX],AL	;CALL	LDDEA
	INC	ESI
	INC	EDX
	DEC	CH
	JNE	GETN05
	JMP	ERR6

GETN20:	MOV	AL,' '
	MOV	[EDX],AL	;CALL	LDDEA
	MOV	AL,80	;40
	SUB	AL,CH
	MOV	[WORK2],AL
	MOV	EBX,WORK2+1
	MOV	AL,[EBX]
	CMP	AL,'0'
	JB	GETN40
	CMP	AL,'9'+1
	JNB	GETN40
	XOR	AL,AL
	MOV	[EDX],AL	;CALL	LDDEA
	DEC	EDX
	MOV	AL,[EDX]	;CALL	LDADE

	XOR	EBX,EBX	;value
	CMP	AL,'H'
	JNE	GETN24

;	hex

	XOR	AL,AL
	MOV	[EDX],AL	;CALL	LDDEA
	MOV	EDX,WORK2+1

GETN21:	MOV	AL,[EDX]	;CALL	LDADE
	OR	AL,AL
	JE	GETN55
	CMP	AL,'A'
	JB	SHORT GETN22
	SUB	AL,7

GETN22:	SUB	AL,'0'
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7

	MOVZX	EAX,AL
	ADD	EBX,EAX
	JB	ERR7
	INC	EDX
	JMP	GETN21

;	bin

GETN24:	CMP	AL,'B'
	JNE	GETN28
	XOR	AL,AL
	MOV	[EDX],AL	;CALL	LDDEA
	MOV	EDX,WORK2+1
	XOR	EBX,EBX

GETN25:	MOV	AL,[EDX]	;CALL	LDADE
	OR	AL,AL
	JE	GETN55
	SUB	AL,'0'
	CMP	AL,2
	JNB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	XOR	ECX,ECX
	MOV	CL,AL
	ADD	EBX,ECX
	JB	ERR7
	INC	EDX
	JMP	GETN25

;	decimal

GETN28:	MOV	EDX,WORK2+1
	XOR	EBX,EBX
GETN29:	MOV	AL,[EDX]	;CALL	LDADE
	OR	AL,AL
	JE	GETN55
	CMP	AL,'9'+1
	JNB	ERR7
	SUB	AL,'0'
	ADD	EBX,EBX
	JB	ERR7
	MOV	ECX,EBX
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,ECX
	JB	ERR7

	MOVZX	EAX,AL
	ADD	EBX,EAX
	JB	ERR7
	INC	EDX
	JMP	GETN29

GETN40:
		MOV	BYTE [INCL_NAME],1

	MOV	EBX,WORK2
	MOV	[PNT2],EBX
	MOV	EBX,[VAL1]
	PUSH	EBX
	CALL	SRCHL
	JNB	GET45
	MOV	AL,[PASS]
	DEC	AL
	JNE	ERR9		;if label not found & PASS!=1

		MOV	DWORD [VAL1],7FFFFFH
GET45:
	MOV	EDX,[VAL1]

	POP	EBX
	MOV	[VAL1],EBX
	XCHG	EDX,EBX
	JMP	GETN50

GETN55:

GETN50:
	OR	AL,AL
	RET

GETN60:	MOV	CL,AL
	INC	ESI
	MOV	EBX,0
	MOV	AL,[ESI]
	CMP	AL,CL
	JE	ERR7
;
;
	CMP	AL,7FH
	JE	ERR7
	MOV	BH,AL
	INC	ESI
	MOV	AL,[ESI]
	CMP	AL,CL
	JE	GETN66
	MOV	BL,AL
	INC	ESI
	MOV	AL,[ESI]
	CMP	AL,CL
	JNE	ERR6
GETN65:	INC	ESI
	JMP	GETN50

GETN66:	MOV	BL,BH
	;MOV	BH,0
	MOVZX	EBX,BL
	JMP	GETN65

GETN70:	INC	ESI
;	XOR	EBX,EBX
	MOV	EBX,[O.ADR1]
	JMP	GETN50

;---------------------

;
;	DX:label set adrs
;	WORK:data
;
;	>DX:label next pnt (when PASS 1)
;

SET.LBL:
	MOV	[LBL.PNT.NEXT],EDX

	CMP	BYTE [PASS],1
	JNE	SET.LBL50	;if PASS!=1

	MOV	EBX,WORK1
	CALL	HASH

	MOVZX	ECX,AL
	SHL	ECX,2		;CX=AL*2
	MOV	EBX,[ECX+LBL.PNT.TOP]	;if [LBL.PNT.TOP+CX]!=0
	OR	EBX,EBX
	JNE	SET.LBL10

	MOV	[ECX+LBL.PNT.TOP],EDX
	JMP	SET.LBL20

SET.LBL10:
	MOV	EDX,[ECX+LBL.PNT]
	INC	EDX		;DX=[LBL.PNT+CX]+1

	MOV	EBX,[LBL.PNT.NEXT]
	MOV	[EDX],EBX	;link		;[DX]=[LBL.PNT.NEXT]

SET.LBL20:
	MOV	EDX,[LBL.PNT.NEXT]
	MOV	[ECX+LBL.PNT],EDX

SET.LBL50:
	MOV	EBX,WORK1

	MOV	AL,[EBX]	;len
	MOV	[EDX],AL
	INC	EBX
	INC	EDX

	CMP	BYTE [PASS],1
	JE	SET.LBL60	;if PASS==1

	ADD	EDX,4	;2	;for link
	JMP	SET.LBL70
SET.LBL60:
	MOV	DWORD [EDX],0
	ADD	EDX,4

SET.LBL70:
	MOV	AL,[WORK1]
	MOVZX	ECX,AL
	ADD	ECX,4		;CX=len+4;for value
	;CALL	LDIR
;
;LDIR:
	PUSH	ESI
	PUSH	EDI

	MOV	ESI,EBX
	MOV	EDI,EDX
	CLD
	REP
	MOVSB
	MOV	EBX,ESI
	MOV	EDX,EDI

	POP	EDI
	POP	ESI

	RET

;
;	[PNT2]:data adrs
;
;	>CF:0(found)/1:(not found)
;	>[VAL1]:value
;	>[PNT2]:top pnt
;
;	?AL
;
;	+0 len
;	+1 next
;	+5 name,...0
;	   value
;

SRCHL:
	PUSH	ESI
	PUSH	EDI
	PUSH	ECX

	PUSH	EBX
	MOV	EBX,[PNT2]
	CALL	HASH
	POP	EBX

SRCHL.05:
	MOVZX	ECX,AL
	SHL	ECX,2
	MOV	ESI,[ECX+LBL.PNT.TOP]		;BX=[LBL.PNT.TOP+AL*2]
	OR	ESI,ESI
	JE	SRCHL4

SRCHL1:
	MOV	EDI,[PNT2]

	MOV	AL,[EDI]
	SUB	AL,[ESI]

	PUSH	ESI		;save top adrs
	INC	EDI
	INC	ESI

	MOV	ECX,[ESI]
	ADD	ESI,4

	MOV	[LBL.PNT.NEXT],ECX
	OR	AL,AL
	JNE	SRCHL3		;if len is different

	MOVZX	ECX,BYTE [EDI-1]

SRCHL2:	REP
	CMPSB
	JNE	SRCHL3

	;MOV	AL,[EBX]
	;CMP	AL,[EDX]
	;JNE	SRCHL3	;if different letter
	;INC	EBX
	;INC	EDX
	;DEC	CH
	;JNE	SRCHL2

	MOV	EDI,[ESI]

	MOV	[VAL1],EDI	;[VAL1]=[BX] value
	POP	ESI
	MOV	[PNT2],ESI	;[PNT2]=BX top pnt

	POP	ECX
	POP	EDI
	POP	ESI
	OR	AL,AL
	RET
SRCHL3:
	POP	ESI

	MOV	ESI,[LBL.PNT.NEXT]
	OR	ESI,ESI
	JE	SRCHL4
	JMP	SRCHL1
SRCHL4:
	POP	ECX
	POP	EDI
	POP	ESI
	STC
	RET







;
;
;
ERR_STOP:
	CALL	ERRSUB
	MOV	AL,[FLAG_FILE2]
	OR	AL,AL
	JE	ERR_STOP.10

	MOV	EBX,[HDL2]
	MOV	AX,3E00H
	CALL	INT21_close	;INT	21H

ERR_STOP.10:
	MOV	AH,4CH
	CALL	INT21_exit	;INT	21H

ERR_CONT:
	CALL	ERRSUB
	MOV	ESP,[STACK]
	JMP	MAIN50

#INCLUDE <ASM-COM.ASM>


_TEXT_FILL:
	;ds	HEADER+0600h-$
	ALIGN	FILE_ALIGN	;200h
_TEXT_END:


#INCLUDE <IMPORT-C.ASM>


;-----------------------

_DATA:

#INCLUDE <ASM-COMD.ASM>


;
CLINE:	DS	100H





MES1:	DEFM	'==== 8086 Self Assembler ===='
	DEFB	0DH,0AH
	DEFM	'       Programed by djnz80a'
	DEFB	0DH,0AH,'$'


FLG.J:	DS	4

PRE_SEG:DS	1


VAL1:	DS	4
VAL2:	DS	4

USRDMA:

	;;END



_DATA_FILL:
	;ds	HEADER+0a00h-$
	ALIGN	FILE_ALIGN	;200h

_DATA_END:

#INCLUDE <DEBUG-C.ASM>

